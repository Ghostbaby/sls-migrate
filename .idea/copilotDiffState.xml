<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/internal/store/alert_store.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/internal/store/alert_store.go" />
              <option name="originalContent" value="package store&#10;&#10;import (&#10;&#9;&quot;context&quot;&#10;&#9;&quot;fmt&quot;&#10;&#10;&#9;&quot;github.com/Ghostbaby/sls-migrate/internal/models&quot;&#10;&#9;&quot;github.com/Ghostbaby/sls-migrate/pkg/database&quot;&#10;&#9;&quot;gorm.io/gorm&quot;&#10;)&#10;&#10;// AlertStore Alert 数据存储接口&#10;type AlertStore interface {&#10;&#9;Create(ctx context.Context, alert *models.Alert) error&#10;&#9;GetByID(ctx context.Context, id uint) (*models.Alert, error)&#10;&#9;GetByName(ctx context.Context, name string) (*models.Alert, error)&#10;&#9;Update(ctx context.Context, alert *models.Alert) error&#10;&#9;Delete(ctx context.Context, id uint) error&#10;&#9;List(ctx context.Context, offset, limit int) ([]*models.Alert, int64, error)&#10;&#9;ListByStatus(ctx context.Context, status string, offset, limit int) ([]*models.Alert, int64, error)&#10;&#9;CreateWithTransaction(ctx context.Context, alert *models.Alert) error&#10;&#9;UpdateWithTransaction(ctx context.Context, alert *models.Alert) error&#10;&#9;Count(ctx context.Context) (int64, error)&#10;}&#10;&#10;// alertStore Alert 数据存储实现&#10;type alertStore struct {&#10;&#9;db *gorm.DB&#10;}&#10;&#10;// NewAlertStore 创建新的 AlertStore 实例&#10;func NewAlertStore() AlertStore {&#10;&#9;return &amp;alertStore{&#10;&#9;&#9;db: database.DB,&#10;&#9;}&#10;}&#10;&#10;// Create 创建 Alert&#10;func (s *alertStore) Create(ctx context.Context, alert *models.Alert) error {&#10;&#9;return s.db.WithContext(ctx).Create(alert).Error&#10;}&#10;&#10;// GetByID 根据 ID 获取 Alert&#10;func (s *alertStore) GetByID(ctx context.Context, id uint) (*models.Alert, error) {&#10;&#9;var alert models.Alert&#10;&#9;err := s.db.WithContext(ctx).&#10;&#9;&#9;Preload(&quot;Configuration&quot;).&#10;&#9;&#9;Preload(&quot;Configuration.ConditionConfig&quot;).&#10;&#9;&#9;Preload(&quot;Configuration.GroupConfig&quot;).&#10;&#9;&#9;Preload(&quot;Configuration.PolicyConfig&quot;).&#10;&#9;&#9;Preload(&quot;Configuration.TemplateConfig&quot;).&#10;&#9;&#9;Preload(&quot;Configuration.SeverityConfigs&quot;).&#10;&#9;&#9;Preload(&quot;Schedule&quot;).&#10;&#9;&#9;Preload(&quot;Tags&quot;).&#10;&#9;&#9;Preload(&quot;Queries&quot;).&#10;&#9;&#9;First(&amp;alert, id).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#9;return &amp;alert, nil&#10;}&#10;&#10;// GetByName 根据名称获取 Alert&#10;func (s *alertStore) GetByName(ctx context.Context, name string) (*models.Alert, error) {&#10;&#9;var alert models.Alert&#10;&#9;err := s.db.WithContext(ctx).&#10;&#9;&#9;Preload(&quot;Configuration&quot;).&#10;&#9;&#9;Preload(&quot;Configuration.ConditionConfig&quot;).&#10;&#9;&#9;Preload(&quot;Configuration.GroupConfig&quot;).&#10;&#9;&#9;Preload(&quot;Configuration.PolicyConfig&quot;).&#10;&#9;&#9;Preload(&quot;Configuration.TemplateConfig&quot;).&#10;&#9;&#9;Preload(&quot;Configuration.SeverityConfigs&quot;).&#10;&#9;&#9;Preload(&quot;Schedule&quot;).&#10;&#9;&#9;Preload(&quot;Tags&quot;).&#10;&#9;&#9;Preload(&quot;Queries&quot;).&#10;&#9;&#9;Where(&quot;name = ?&quot;, name).&#10;&#9;&#9;First(&amp;alert).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#9;return &amp;alert, nil&#10;}&#10;&#10;// Update 更新 Alert&#10;func (s *alertStore) Update(ctx context.Context, alert *models.Alert) error {&#10;&#9;return s.db.WithContext(ctx).Save(alert).Error&#10;}&#10;&#10;// Delete 删除 Alert&#10;func (s *alertStore) Delete(ctx context.Context, id uint) error {&#10;&#9;return s.db.WithContext(ctx).Transaction(func(tx *gorm.DB) error {&#10;&#9;&#9;// 步骤1: 删除所有关联的子表数据&#10;&#9;&#9;if err := s.deleteConfigurationAssociations(tx, id); err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to delete configuration associations: %w&quot;, err)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤2: 删除 Configuration 记录&#10;&#9;&#9;if err := tx.Where(&quot;alert_id = ?&quot;, id).Delete(&amp;models.AlertConfiguration{}).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to delete alert configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤3: 删除 Schedule 记录&#10;&#9;&#9;if err := tx.Where(&quot;alert_id = ?&quot;, id).Delete(&amp;models.AlertSchedule{}).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to delete alert schedule: %w&quot;, err)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤4: 删除 Tags 记录&#10;&#9;&#9;if err := tx.Where(&quot;alert_id = ?&quot;, id).Delete(&amp;models.AlertTag{}).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to delete alert tags: %w&quot;, err)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤5: 删除 Queries 记录&#10;&#9;&#9;if err := tx.Where(&quot;alert_id = ?&quot;, id).Delete(&amp;models.AlertQuery{}).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to delete alert queries: %w&quot;, err)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤6: 最后删除主记录&#10;&#9;&#9;if err := tx.Delete(&amp;models.Alert{}, id).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to delete alert: %w&quot;, err)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;return nil&#10;&#9;})&#10;}&#10;&#10;// List 分页获取 Alert 列表&#10;func (s *alertStore) List(ctx context.Context, offset, limit int) ([]*models.Alert, int64, error) {&#10;&#9;var alerts []*models.Alert&#10;&#9;var total int64&#10;&#10;&#9;// 获取总数&#10;&#9;if err := s.db.WithContext(ctx).Model(&amp;models.Alert{}).Count(&amp;total).Error; err != nil {&#10;&#9;&#9;return nil, 0, err&#10;&#9;}&#10;&#10;&#9;// 获取分页数据&#10;&#9;err := s.db.WithContext(ctx).&#10;&#9;&#9;Preload(&quot;Configuration&quot;).&#10;&#9;&#9;Preload(&quot;Schedule&quot;).&#10;&#9;&#9;Preload(&quot;Tags&quot;).&#10;&#9;&#9;Preload(&quot;Queries&quot;).&#10;&#9;&#9;Offset(offset).&#10;&#9;&#9;Limit(limit).&#10;&#9;&#9;Order(&quot;created_at DESC&quot;).&#10;&#9;&#9;Find(&amp;alerts).Error&#10;&#10;&#9;return alerts, total, err&#10;}&#10;&#10;// ListByStatus 根据状态分页获取 Alert 列表&#10;func (s *alertStore) ListByStatus(ctx context.Context, status string, offset, limit int) ([]*models.Alert, int64, error) {&#10;&#9;var alerts []*models.Alert&#10;&#9;var total int64&#10;&#10;&#9;// 获取总数&#10;&#9;if err := s.db.WithContext(ctx).Model(&amp;models.Alert{}).Where(&quot;status = ?&quot;, status).Count(&amp;total).Error; err != nil {&#10;&#9;&#9;return nil, 0, err&#10;&#9;}&#10;&#10;&#9;// 获取分页数据&#10;&#9;err := s.db.WithContext(ctx).&#10;&#9;&#9;Preload(&quot;Configuration&quot;).&#10;&#9;&#9;Preload(&quot;Schedule&quot;).&#10;&#9;&#9;Preload(&quot;Tags&quot;).&#10;&#9;&#9;Preload(&quot;Queries&quot;).&#10;&#9;&#9;Where(&quot;status = ?&quot;, status).&#10;&#9;&#9;Offset(offset).&#10;&#9;&#9;Limit(limit).&#10;&#9;&#9;Order(&quot;created_at DESC&quot;).&#10;&#9;&#9;Find(&amp;alerts).Error&#10;&#10;&#9;return alerts, total, err&#10;}&#10;&#10;// CreateWithTransaction 在事务中创建 Alert 及其关联数据&#10;func (s *alertStore) CreateWithTransaction(ctx context.Context, alert *models.Alert) error {&#10;&#9;return s.db.WithContext(ctx).Transaction(func(tx *gorm.DB) error {&#10;&#9;&#9;// 保存关联数据的引用&#10;&#9;&#9;originalConfig := alert.Configuration&#10;&#9;&#9;originalSchedule := alert.Schedule&#10;&#9;&#9;originalTags := alert.Tags&#10;&#9;&#9;originalQueries := alert.Queries&#10;&#10;&#9;&#9;// 调试输出&#10;&#9;&#9;fmt.Printf(&quot;DEBUG: Creating alert %s\n&quot;, alert.Name)&#10;&#9;&#9;fmt.Printf(&quot;DEBUG: originalConfig is nil: %v\n&quot;, originalConfig == nil)&#10;&#9;&#9;if originalConfig != nil {&#10;&#9;&#9;&#9;fmt.Printf(&quot;DEBUG: originalConfig has data: Type=%v, Version=%v\n&quot;,&#10;&#9;&#9;&#9;&#9;originalConfig.Type, originalConfig.Version)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤1: 创建纯净的 Alert 主记录（不包含关联数据）&#10;&#9;&#9;cleanAlert := models.Alert{&#10;&#9;&#9;&#9;Name:             alert.Name,&#10;&#9;&#9;&#9;DisplayName:      alert.DisplayName,&#10;&#9;&#9;&#9;Description:      alert.Description,&#10;&#9;&#9;&#9;Status:           alert.Status,&#10;&#9;&#9;&#9;CreateTime:       alert.CreateTime,&#10;&#9;&#9;&#9;LastModifiedTime: alert.LastModifiedTime,&#10;&#9;&#9;}&#10;&#10;&#9;&#9;if err := tx.Create(&amp;cleanAlert).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create alert: %w&quot;, err)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 更新原始alert的ID&#10;&#9;&#9;alert.ID = cleanAlert.ID&#10;&#10;&#9;&#9;// 步骤2: 创建所有独立的配置表记录&#10;&#9;&#9;if originalConfig != nil {&#10;&#9;&#9;&#9;// 创建独立的配置表记录&#10;&#9;&#9;&#9;if originalConfig.ConditionConfig != nil {&#10;&#9;&#9;&#9;&#9;if err := tx.Create(originalConfig.ConditionConfig).Error; err != nil {&#10;&#9;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create condition configuration: %w&quot;, err)&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;originalConfig.ConditionConfigID = &amp;originalConfig.ConditionConfig.ID&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;if originalConfig.GroupConfig != nil {&#10;&#9;&#9;&#9;&#9;if err := tx.Create(originalConfig.GroupConfig).Error; err != nil {&#10;&#9;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create group configuration: %w&quot;, err)&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;originalConfig.GroupConfigID = &amp;originalConfig.GroupConfig.ID&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;if originalConfig.PolicyConfig != nil {&#10;&#9;&#9;&#9;&#9;if err := tx.Create(originalConfig.PolicyConfig).Error; err != nil {&#10;&#9;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create policy configuration: %w&quot;, err)&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;originalConfig.PolicyConfigID = &amp;originalConfig.PolicyConfig.ID&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;if originalConfig.TemplateConfig != nil {&#10;&#9;&#9;&#9;&#9;if err := tx.Create(originalConfig.TemplateConfig).Error; err != nil {&#10;&#9;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create template configuration: %w&quot;, err)&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;originalConfig.TemplateConfigID = &amp;originalConfig.TemplateConfig.ID&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// 创建 Sink 配置&#10;&#9;&#9;&#9;if originalConfig.SinkAlerthubConfig != nil {&#10;&#9;&#9;&#9;&#9;if err := tx.Create(originalConfig.SinkAlerthubConfig).Error; err != nil {&#10;&#9;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create sink alerthub configuration: %w&quot;, err)&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;originalConfig.SinkAlerthubConfigID = &amp;originalConfig.SinkAlerthubConfig.ID&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;if originalConfig.SinkCmsConfig != nil {&#10;&#9;&#9;&#9;&#9;if err := tx.Create(originalConfig.SinkCmsConfig).Error; err != nil {&#10;&#9;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create sink cms configuration: %w&quot;, err)&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;originalConfig.SinkCmsConfigID = &amp;originalConfig.SinkCmsConfig.ID&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;if originalConfig.SinkEventStoreConfig != nil {&#10;&#9;&#9;&#9;&#9;if err := tx.Create(originalConfig.SinkEventStoreConfig).Error; err != nil {&#10;&#9;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create sink event store configuration: %w&quot;, err)&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;originalConfig.SinkEventStoreConfigID = &amp;originalConfig.SinkEventStoreConfig.ID&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// 步骤3: 创建 alert_configurations 记录&#10;&#9;&#9;&#9;configToCreate := models.AlertConfiguration{&#10;&#9;&#9;&#9;&#9;AlertID:                alert.ID,&#10;&#9;&#9;&#9;&#9;AutoAnnotation:         originalConfig.AutoAnnotation,&#10;&#9;&#9;&#9;&#9;Dashboard:              originalConfig.Dashboard,&#10;&#9;&#9;&#9;&#9;MuteUntil:              originalConfig.MuteUntil,&#10;&#9;&#9;&#9;&#9;NoDataFire:             originalConfig.NoDataFire,&#10;&#9;&#9;&#9;&#9;NoDataSeverity:         originalConfig.NoDataSeverity,&#10;&#9;&#9;&#9;&#9;Threshold:              originalConfig.Threshold,&#10;&#9;&#9;&#9;&#9;Type:                   originalConfig.Type,&#10;&#9;&#9;&#9;&#9;Version:                originalConfig.Version,&#10;&#9;&#9;&#9;&#9;SendResolved:           originalConfig.SendResolved,&#10;&#9;&#9;&#9;&#9;ConditionConfigID:      originalConfig.ConditionConfigID,&#10;&#9;&#9;&#9;&#9;GroupConfigID:          originalConfig.GroupConfigID,&#10;&#9;&#9;&#9;&#9;PolicyConfigID:         originalConfig.PolicyConfigID,&#10;&#9;&#9;&#9;&#9;TemplateConfigID:       originalConfig.TemplateConfigID,&#10;&#9;&#9;&#9;&#9;SinkAlerthubConfigID:   originalConfig.SinkAlerthubConfigID,&#10;&#9;&#9;&#9;&#9;SinkCmsConfigID:        originalConfig.SinkCmsConfigID,&#10;&#9;&#9;&#9;&#9;SinkEventStoreConfigID: originalConfig.SinkEventStoreConfigID,&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;if err := tx.Create(&amp;configToCreate).Error; err != nil {&#10;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create alert configuration: %w&quot;, err)&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;originalConfig.ID = configToCreate.ID&#10;&#9;&#9;&#9;alert.ConfigurationID = &amp;configToCreate.ID&#10;&#10;&#9;&#9;&#9;// 步骤4: 创建依赖于alert_configurations的记录&#10;&#9;&#9;&#9;if len(originalConfig.SeverityConfigs) &gt; 0 {&#10;&#9;&#9;&#9;&#9;for i := range originalConfig.SeverityConfigs {&#10;&#9;&#9;&#9;&#9;&#9;// 如果有 EvalCondition，先创建它&#10;&#9;&#9;&#9;&#9;&#9;if originalConfig.SeverityConfigs[i].EvalCondition != nil {&#10;&#9;&#9;&#9;&#9;&#9;&#9;if err := tx.Create(originalConfig.SeverityConfigs[i].EvalCondition).Error; err != nil {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create eval condition: %w&quot;, err)&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;originalConfig.SeverityConfigs[i].EvalConditionID = &amp;originalConfig.SeverityConfigs[i].EvalCondition.ID&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;&#9;originalConfig.SeverityConfigs[i].AlertConfigID = configToCreate.ID&#10;&#9;&#9;&#9;&#9;&#9;originalConfig.SeverityConfigs[i].ID = 0&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;if err := tx.Create(&amp;originalConfig.SeverityConfigs).Error; err != nil {&#10;&#9;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create severity configurations: %w&quot;, err)&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;if len(originalConfig.JoinConfigs) &gt; 0 {&#10;&#9;&#9;&#9;&#9;for i := range originalConfig.JoinConfigs {&#10;&#9;&#9;&#9;&#9;&#9;originalConfig.JoinConfigs[i].AlertConfigID = configToCreate.ID&#10;&#9;&#9;&#9;&#9;&#9;originalConfig.JoinConfigs[i].ID = 0&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;if err := tx.Create(&amp;originalConfig.JoinConfigs).Error; err != nil {&#10;&#9;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create join configurations: %w&quot;, err)&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤5: 创建 Schedule&#10;&#9;&#9;if originalSchedule != nil {&#10;&#9;&#9;&#9;scheduleToCreate := models.AlertSchedule{&#10;&#9;&#9;&#9;&#9;AlertID:        alert.ID,&#10;&#9;&#9;&#9;&#9;CronExpression: originalSchedule.CronExpression,&#10;&#9;&#9;&#9;&#9;Delay:          originalSchedule.Delay,&#10;&#9;&#9;&#9;&#9;Interval:       originalSchedule.Interval,&#10;&#9;&#9;&#9;&#9;RunImmediately: originalSchedule.RunImmediately,&#10;&#9;&#9;&#9;&#9;TimeZone:       originalSchedule.TimeZone,&#10;&#9;&#9;&#9;&#9;Type:           originalSchedule.Type,&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;if err := tx.Create(&amp;scheduleToCreate).Error; err != nil {&#10;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create alert schedule: %w&quot;, err)&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;alert.ScheduleID = &amp;scheduleToCreate.ID&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤6: 创建 Tags&#10;&#9;&#9;if len(originalTags) &gt; 0 {&#10;&#9;&#9;&#9;tagsToCreate := make([]models.AlertTag, len(originalTags))&#10;&#9;&#9;&#9;for i, tag := range originalTags {&#10;&#9;&#9;&#9;&#9;tagsToCreate[i] = models.AlertTag{&#10;&#9;&#9;&#9;&#9;&#9;AlertID:  alert.ID,&#10;&#9;&#9;&#9;&#9;&#9;TagType:  tag.TagType,&#10;&#9;&#9;&#9;&#9;&#9;TagKey:   tag.TagKey,&#10;&#9;&#9;&#9;&#9;&#9;TagValue: tag.TagValue,&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;if err := tx.Create(&amp;tagsToCreate).Error; err != nil {&#10;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create alert tags: %w&quot;, err)&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤7: 创建 Queries&#10;&#9;&#9;if len(originalQueries) &gt; 0 {&#10;&#9;&#9;&#9;queriesToCreate := make([]models.AlertQuery, len(originalQueries))&#10;&#9;&#9;&#9;for i, query := range originalQueries {&#10;&#9;&#9;&#9;&#9;queriesToCreate[i] = models.AlertQuery{&#10;&#9;&#9;&#9;&#9;&#9;AlertID:      alert.ID,&#10;&#9;&#9;&#9;&#9;&#9;ChartTitle:   query.ChartTitle,&#10;&#9;&#9;&#9;&#9;&#9;DashboardId:  query.DashboardId,&#10;&#9;&#9;&#9;&#9;&#9;End:          query.End,&#10;&#9;&#9;&#9;&#9;&#9;PowerSqlMode: query.PowerSqlMode,&#10;&#9;&#9;&#9;&#9;&#9;Project:      query.Project,&#10;&#9;&#9;&#9;&#9;&#9;Query:        query.Query,&#10;&#9;&#9;&#9;&#9;&#9;Region:       query.Region,&#10;&#9;&#9;&#9;&#9;&#9;RoleArn:      query.RoleArn,&#10;&#9;&#9;&#9;&#9;&#9;Start:        query.Start,&#10;&#9;&#9;&#9;&#9;&#9;Store:        query.Store,&#10;&#9;&#9;&#9;&#9;&#9;StoreType:    query.StoreType,&#10;&#9;&#9;&#9;&#9;&#9;TimeSpanType: query.TimeSpanType,&#10;&#9;&#9;&#9;&#9;&#9;Ui:           query.Ui,&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;if err := tx.Create(&amp;queriesToCreate).Error; err != nil {&#10;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create alert queries: %w&quot;, err)&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤8: 最后更新主记录的关联ID&#10;&#9;&#9;updateData := map[string]interface{}{}&#10;&#9;&#9;if alert.ConfigurationID != nil {&#10;&#9;&#9;&#9;updateData[&quot;configuration_id&quot;] = *alert.ConfigurationID&#10;&#9;&#9;}&#10;&#9;&#9;if alert.ScheduleID != nil {&#10;&#9;&#9;&#9;updateData[&quot;schedule_id&quot;] = *alert.ScheduleID&#10;&#9;&#9;}&#10;&#10;&#9;&#9;if len(updateData) &gt; 0 {&#10;&#9;&#9;&#9;if err := tx.Model(&amp;models.Alert{}).Where(&quot;id = ?&quot;, alert.ID).Updates(updateData).Error; err != nil {&#10;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update alert with relation IDs: %w&quot;, err)&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;return nil&#10;&#9;})&#10;}&#10;&#10;// deleteConfigurationAssociations 删除 Configuration 的所有关联数据&#10;func (s *alertStore) deleteConfigurationAssociations(tx *gorm.DB, alertID uint) error {&#10;&#9;// 先获取 Configuration ID&#10;&#9;var configID uint&#10;&#9;if err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;alert_id = ?&quot;, alertID).Select(&quot;id&quot;).First(&amp;configID).Error; err != nil {&#10;&#9;&#9;if err == gorm.ErrRecordNotFound {&#10;&#9;&#9;&#9;return nil // 没有 Configuration，直接返回&#10;&#9;&#9;}&#10;&#9;&#9;return fmt.Errorf(&quot;failed to get configuration ID: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;// 删除所有关联的子表数据&#10;&#9;if err := tx.Where(&quot;alert_config_id = ?&quot;, configID).Delete(&amp;models.SeverityConfiguration{}).Error; err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to delete severity configurations: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;if err := tx.Where(&quot;alert_config_id = ?&quot;, configID).Delete(&amp;models.JoinConfiguration{}).Error; err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to delete join configurations: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;// 注意：这里不删除 Configuration 本身，因为主删除方法会处理&#10;&#9;return nil&#10;}&#10;&#10;// recreateConfiguration 重新创建 Configuration 及其关联数据&#10;func (s *alertStore) recreateConfiguration(tx *gorm.DB, alert *models.Alert) error {&#10;&#9;if alert.Configuration == nil {&#10;&#9;&#9;return nil&#10;&#9;}&#10;&#10;&#9;// 创建新的 Configuration&#10;&#9;configToCreate := models.AlertConfiguration{&#10;&#9;&#9;AlertID:        alert.ID,&#10;&#9;&#9;AutoAnnotation: alert.Configuration.AutoAnnotation,&#10;&#9;&#9;Dashboard:      alert.Configuration.Dashboard,&#10;&#9;&#9;MuteUntil:      alert.Configuration.MuteUntil,&#10;&#9;&#9;NoDataFire:     alert.Configuration.NoDataFire,&#10;&#9;&#9;NoDataSeverity: alert.Configuration.NoDataSeverity,&#10;&#9;&#9;Threshold:      alert.Configuration.Threshold,&#10;&#9;&#9;Type:           alert.Configuration.Type,&#10;&#9;&#9;Version:        alert.Configuration.Version,&#10;&#9;&#9;SendResolved:   alert.Configuration.SendResolved,&#10;&#9;}&#10;&#10;&#9;// 创建独立的配置表记录&#10;&#9;if alert.Configuration.ConditionConfig != nil {&#10;&#9;&#9;if err := tx.Create(alert.Configuration.ConditionConfig).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create condition configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;configToCreate.ConditionConfigID = &amp;alert.Configuration.ConditionConfig.ID&#10;&#9;}&#10;&#10;&#9;if alert.Configuration.GroupConfig != nil {&#10;&#9;&#9;if err := tx.Create(alert.Configuration.GroupConfig).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create group configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;configToCreate.GroupConfigID = &amp;alert.Configuration.GroupConfig.ID&#10;&#9;}&#10;&#10;&#9;if alert.Configuration.PolicyConfig != nil {&#10;&#9;&#9;if err := tx.Create(alert.Configuration.PolicyConfig).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create policy configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;configToCreate.PolicyConfigID = &amp;alert.Configuration.PolicyConfig.ID&#10;&#9;}&#10;&#10;&#9;if alert.Configuration.TemplateConfig != nil {&#10;&#9;&#9;if err := tx.Create(alert.Configuration.TemplateConfig).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create template configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;configToCreate.TemplateConfigID = &amp;alert.Configuration.TemplateConfig.ID&#10;&#9;}&#10;&#10;&#9;// 创建 Sink 配置&#10;&#9;if alert.Configuration.SinkAlerthubConfig != nil {&#10;&#9;&#9;if err := tx.Create(alert.Configuration.SinkAlerthubConfig).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create sink alerthub configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;configToCreate.SinkAlerthubConfigID = &amp;alert.Configuration.SinkAlerthubConfig.ID&#10;&#9;}&#10;&#10;&#9;if alert.Configuration.SinkCmsConfig != nil {&#10;&#9;&#9;if err := tx.Create(alert.Configuration.SinkCmsConfig).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create sink cms configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;configToCreate.SinkCmsConfigID = &amp;alert.Configuration.SinkCmsConfig.ID&#10;&#9;}&#10;&#10;&#9;if alert.Configuration.SinkEventStoreConfig != nil {&#10;&#9;&#9;if err := tx.Create(alert.Configuration.SinkEventStoreConfig).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create sink event store configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;configToCreate.SinkEventStoreConfigID = &amp;alert.Configuration.SinkEventStoreConfig.ID&#10;&#9;}&#10;&#10;&#9;// 创建 Configuration 记录&#10;&#9;if err := tx.Create(&amp;configToCreate).Error; err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to create alert configuration: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;alert.ConfigurationID = &amp;configToCreate.ID&#10;&#10;&#9;// 创建依赖于 alert_configurations 的记录&#10;&#9;if len(alert.Configuration.SeverityConfigs) &gt; 0 {&#10;&#9;&#9;for i := range alert.Configuration.SeverityConfigs {&#10;&#9;&#9;&#9;// 如果有 EvalCondition，先创建它&#10;&#9;&#9;&#9;if alert.Configuration.SeverityConfigs[i].EvalCondition != nil {&#10;&#9;&#9;&#9;&#9;if err := tx.Create(alert.Configuration.SeverityConfigs[i].EvalCondition).Error; err != nil {&#10;&#9;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create eval condition: %w&quot;, err)&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;alert.Configuration.SeverityConfigs[i].EvalConditionID = &amp;alert.Configuration.SeverityConfigs[i].EvalCondition.ID&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;alert.Configuration.SeverityConfigs[i].AlertConfigID = configToCreate.ID&#10;&#9;&#9;&#9;alert.Configuration.SeverityConfigs[i].ID = 0&#10;&#9;&#9;}&#10;&#9;&#9;if err := tx.Create(&amp;alert.Configuration.SeverityConfigs).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create severity configurations: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;if len(alert.Configuration.JoinConfigs) &gt; 0 {&#10;&#9;&#9;for i := range alert.Configuration.JoinConfigs {&#10;&#9;&#9;&#9;alert.Configuration.JoinConfigs[i].AlertConfigID = configToCreate.ID&#10;&#9;&#9;&#9;alert.Configuration.JoinConfigs[i].ID = 0&#10;&#9;&#9;}&#10;&#9;&#9;if err := tx.Create(&amp;alert.Configuration.JoinConfigs).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create join configurations: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;return nil&#10;}&#10;&#10;// UpdateWithTransaction 在事务中更新 Alert 及其关联数据&#10;func (s *alertStore) UpdateWithTransaction(ctx context.Context, alert *models.Alert) error {&#10;&#9;return s.db.WithContext(ctx).Transaction(func(tx *gorm.DB) error {&#10;&#9;&#9;// 确保 Alert ID 存在&#10;&#9;&#9;if alert.ID == 0 {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;alert ID is required for update&quot;)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤1: 更新主记录&#10;&#9;&#9;updateData := map[string]interface{}{&#10;&#9;&#9;&#9;&quot;display_name&quot;:       alert.DisplayName,&#10;&#9;&#9;&#9;&quot;description&quot;:        alert.Description,&#10;&#9;&#9;&#9;&quot;status&quot;:             alert.Status,&#10;&#9;&#9;&#9;&quot;last_modified_time&quot;: alert.LastModifiedTime,&#10;&#9;&#9;}&#10;&#10;&#9;&#9;if err := tx.Model(&amp;models.Alert{}).Where(&quot;id = ?&quot;, alert.ID).Updates(updateData).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update alert: %w&quot;, err)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤2: 处理 Configuration 更新&#10;&#9;&#9;if alert.Configuration != nil {&#10;&#9;&#9;&#9;// 先删除旧的关联数据（但不删除主配置记录）&#10;&#9;&#9;&#9;if err := s.deleteConfigurationAssociations(tx, alert.ID); err != nil {&#10;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to delete old configuration associations: %w&quot;, err)&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// 更新现有的 Configuration 记录&#10;&#9;&#9;&#9;if err := s.updateConfiguration(tx, alert); err != nil {&#10;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update configuration: %w&quot;, err)&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤3: 处理 Schedule 更新&#10;&#9;&#9;if alert.Schedule != nil {&#10;&#9;&#9;&#9;// 删除旧的 Schedule&#10;&#9;&#9;&#9;if err := tx.Where(&quot;alert_id = ?&quot;, alert.ID).Delete(&amp;models.AlertSchedule{}).Error; err != nil {&#10;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to delete old schedule: %w&quot;, err)&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// 创建新的 Schedule&#10;&#9;&#9;&#9;scheduleToCreate := models.AlertSchedule{&#10;&#9;&#9;&#9;&#9;AlertID:        alert.ID,&#10;&#9;&#9;&#9;&#9;CronExpression: alert.Schedule.CronExpression,&#10;&#9;&#9;&#9;&#9;Delay:          alert.Schedule.Delay,&#10;&#9;&#9;&#9;&#9;Interval:       alert.Schedule.Interval,&#10;&#9;&#9;&#9;&#9;RunImmediately: alert.Schedule.RunImmediately,&#10;&#9;&#9;&#9;&#9;TimeZone:       alert.Schedule.TimeZone,&#10;&#9;&#9;&#9;&#9;Type:           alert.Schedule.Type,&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;if err := tx.Create(&amp;scheduleToCreate).Error; err != nil {&#10;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create new schedule: %w&quot;, err)&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;alert.ScheduleID = &amp;scheduleToCreate.ID&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤4: 处理 Tags 更新&#10;&#9;&#9;if len(alert.Tags) &gt; 0 {&#10;&#9;&#9;&#9;// 删除旧的 Tags&#10;&#9;&#9;&#9;if err := tx.Where(&quot;alert_id = ?&quot;, alert.ID).Delete(&amp;models.AlertTag{}).Error; err != nil {&#10;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to delete old tags: %w&quot;, err)&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// 创建新的 Tags&#10;&#9;&#9;&#9;tagsToCreate := make([]models.AlertTag, len(alert.Tags))&#10;&#9;&#9;&#9;for i, tag := range alert.Tags {&#10;&#9;&#9;&#9;&#9;tagsToCreate[i] = models.AlertTag{&#10;&#9;&#9;&#9;&#9;&#9;AlertID:  alert.ID,&#10;&#9;&#9;&#9;&#9;&#9;TagType:  tag.TagType,&#10;&#9;&#9;&#9;&#9;&#9;TagKey:   tag.TagKey,&#10;&#9;&#9;&#9;&#9;&#9;TagValue: tag.TagValue,&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;if err := tx.Create(&amp;tagsToCreate).Error; err != nil {&#10;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create new tags: %w&quot;, err)&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤5: 处理 Queries 更新&#10;&#9;&#9;if len(alert.Queries) &gt; 0 {&#10;&#9;&#9;&#9;// 删除旧的 Queries&#10;&#9;&#9;&#9;if err := tx.Where(&quot;alert_id = ?&quot;, alert.ID).Delete(&amp;models.AlertQuery{}).Error; err != nil {&#10;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to delete old queries: %w&quot;, err)&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// 创建新的 Queries&#10;&#9;&#9;&#9;queriesToCreate := make([]models.AlertQuery, len(alert.Queries))&#10;&#9;&#9;&#9;for i, query := range alert.Queries {&#10;&#9;&#9;&#9;&#9;queriesToCreate[i] = models.AlertQuery{&#10;&#9;&#9;&#9;&#9;&#9;AlertID:      alert.ID,&#10;&#9;&#9;&#9;&#9;&#9;ChartTitle:   query.ChartTitle,&#10;&#9;&#9;&#9;&#9;&#9;DashboardId:  query.DashboardId,&#10;&#9;&#9;&#9;&#9;&#9;End:          query.End,&#10;&#9;&#9;&#9;&#9;&#9;PowerSqlMode: query.PowerSqlMode,&#10;&#9;&#9;&#9;&#9;&#9;Project:      query.Project,&#10;&#9;&#9;&#9;&#9;&#9;Query:        query.Query,&#10;&#9;&#9;&#9;&#9;&#9;Region:       query.Region,&#10;&#9;&#9;&#9;&#9;&#9;RoleArn:      query.RoleArn,&#10;&#9;&#9;&#9;&#9;&#9;Start:        query.Start,&#10;&#9;&#9;&#9;&#9;&#9;Store:        query.Store,&#10;&#9;&#9;&#9;&#9;&#9;StoreType:    query.StoreType,&#10;&#9;&#9;&#9;&#9;&#9;TimeSpanType: query.TimeSpanType,&#10;&#9;&#9;&#9;&#9;&#9;Ui:           query.Ui,&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;if err := tx.Create(&amp;queriesToCreate).Error; err != nil {&#10;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create new queries: %w&quot;, err)&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤6: 更新主记录的关联ID&#10;&#9;&#9;updateData = map[string]interface{}{}&#10;&#9;&#9;if alert.ConfigurationID != nil {&#10;&#9;&#9;&#9;updateData[&quot;configuration_id&quot;] = *alert.ConfigurationID&#10;&#9;&#9;}&#10;&#9;&#9;if alert.ScheduleID != nil {&#10;&#9;&#9;&#9;updateData[&quot;schedule_id&quot;] = *alert.ScheduleID&#10;&#9;&#9;}&#10;&#10;&#9;&#9;if len(updateData) &gt; 0 {&#10;&#9;&#9;&#9;if err := tx.Model(&amp;models.Alert{}).Where(&quot;id = ?&quot;, alert.ID).Updates(updateData).Error; err != nil {&#10;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update alert with relation IDs: %w&quot;, err)&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;return nil&#10;&#9;})&#10;}&#10;&#10;// Count 获取 Alert 总数&#10;func (s *alertStore) Count(ctx context.Context) (int64, error) {&#10;&#9;var total int64&#10;&#9;err := s.db.WithContext(ctx).Model(&amp;models.Alert{}).Count(&amp;total).Error&#10;&#9;return total, err&#10;}&#10;&#10;// updateConfiguration 更新现有的 Configuration 及其关联数据&#10;func (s *alertStore) updateConfiguration(tx *gorm.DB, alert *models.Alert) error {&#10;&#9;if alert.Configuration == nil {&#10;&#9;&#9;return nil&#10;&#9;}&#10;&#10;&#9;// 获取现有的 Configuration ID&#10;&#9;var existingConfigID uint&#10;&#9;if err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;alert_id = ?&quot;, alert.ID).Select(&quot;id&quot;).First(&amp;existingConfigID).Error; err != nil {&#10;&#9;&#9;if err == gorm.ErrRecordNotFound {&#10;&#9;&#9;&#9;// 如果没有现有配置，则创建新的&#10;&#9;&#9;&#9;return s.recreateConfiguration(tx, alert)&#10;&#9;&#9;}&#10;&#9;&#9;return fmt.Errorf(&quot;failed to get existing configuration ID: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;// 更新主配置记录&#10;&#9;updateData := map[string]interface{}{&#10;&#9;&#9;&quot;auto_annotation&quot;:  alert.Configuration.AutoAnnotation,&#10;&#9;&#9;&quot;dashboard&quot;:        alert.Configuration.Dashboard,&#10;&#9;&#9;&quot;mute_until&quot;:       alert.Configuration.MuteUntil,&#10;&#9;&#9;&quot;no_data_fire&quot;:     alert.Configuration.NoDataFire,&#10;&#9;&#9;&quot;no_data_severity&quot;: alert.Configuration.NoDataSeverity,&#10;&#9;&#9;&quot;threshold&quot;:        alert.Configuration.Threshold,&#10;&#9;&#9;&quot;type&quot;:             alert.Configuration.Type,&#10;&#9;&#9;&quot;version&quot;:          alert.Configuration.Version,&#10;&#9;&#9;&quot;send_resolved&quot;:    alert.Configuration.SendResolved,&#10;&#9;}&#10;&#10;&#9;if err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, existingConfigID).Updates(updateData).Error; err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to update alert configuration: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;// 更新关联的配置记录 - 使用 upsert 逻辑避免重复&#10;&#9;if alert.Configuration.ConditionConfig != nil {&#10;&#9;&#9;if err := s.upsertConditionConfig(tx, existingConfigID, alert.Configuration.ConditionConfig); err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to upsert condition configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;if alert.Configuration.GroupConfig != nil {&#10;&#9;&#9;if err := s.upsertGroupConfig(tx, existingConfigID, alert.Configuration.GroupConfig); err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to upsert group configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;if alert.Configuration.PolicyConfig != nil {&#10;&#9;&#9;if err := s.upsertPolicyConfig(tx, existingConfigID, alert.Configuration.PolicyConfig); err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to upsert policy configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;if alert.Configuration.TemplateConfig != nil {&#10;&#9;&#9;if err := s.upsertTemplateConfig(tx, existingConfigID, alert.Configuration.TemplateConfig); err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to upsert template configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;// 更新 Sink 配置 - 使用 upsert 逻辑避免重复&#10;&#9;if alert.Configuration.SinkAlerthubConfig != nil {&#10;&#9;&#9;if err := s.upsertSinkAlerthubConfig(tx, existingConfigID, alert.Configuration.SinkAlerthubConfig); err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to upsert sink alerthub configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;if alert.Configuration.SinkCmsConfig != nil {&#10;&#9;&#9;if err := s.upsertSinkCmsConfig(tx, existingConfigID, alert.Configuration.SinkCmsConfig); err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to upsert sink cms configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;if alert.Configuration.SinkEventStoreConfig != nil {&#10;&#9;&#9;if err := s.upsertSinkEventStoreConfig(tx, existingConfigID, alert.Configuration.SinkEventStoreConfig); err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to upsert sink event store configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;// 更新依赖于 alert_configurations 的记录&#10;&#9;if len(alert.Configuration.SeverityConfigs) &gt; 0 {&#10;&#9;&#9;// 先删除旧的严重程度配置&#10;&#9;&#9;if err := tx.Where(&quot;alert_config_id = ?&quot;, existingConfigID).Delete(&amp;models.SeverityConfiguration{}).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to delete old severity configurations: %w&quot;, err)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 创建新的严重程度配置&#10;&#9;&#9;for i := range alert.Configuration.SeverityConfigs {&#10;&#9;&#9;&#9;// 如果有 EvalCondition，先创建它&#10;&#9;&#9;&#9;if alert.Configuration.SeverityConfigs[i].EvalCondition != nil {&#10;&#9;&#9;&#9;&#9;if err := tx.Create(alert.Configuration.SeverityConfigs[i].EvalCondition).Error; err != nil {&#10;&#9;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create eval condition: %w&quot;, err)&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;alert.Configuration.SeverityConfigs[i].EvalConditionID = &amp;alert.Configuration.SeverityConfigs[i].EvalCondition.ID&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;alert.Configuration.SeverityConfigs[i].AlertConfigID = existingConfigID&#10;&#9;&#9;&#9;alert.Configuration.SeverityConfigs[i].ID = 0&#10;&#9;&#9;}&#10;&#9;&#9;if err := tx.Create(&amp;alert.Configuration.SeverityConfigs).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create severity configurations: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;if len(alert.Configuration.JoinConfigs) &gt; 0 {&#10;&#9;&#9;// 先删除旧的 Join 配置&#10;&#9;&#9;if err := tx.Where(&quot;alert_config_id = ?&quot;, existingConfigID).Delete(&amp;models.JoinConfiguration{}).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to delete old join configurations: %w&quot;, err)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 创建新的 Join 配置&#10;&#9;&#9;for i := range alert.Configuration.JoinConfigs {&#10;&#9;&#9;&#9;alert.Configuration.JoinConfigs[i].AlertConfigID = existingConfigID&#10;&#9;&#9;&#9;alert.Configuration.JoinConfigs[i].ID = 0&#10;&#9;&#9;}&#10;&#9;&#9;if err := tx.Create(&amp;alert.Configuration.JoinConfigs).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create join configurations: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;// 设置主记录的配置ID&#10;&#9;alert.ConfigurationID = &amp;existingConfigID&#10;&#10;&#9;return nil&#10;}&#10;&#10;// upsertConditionConfig 更新或插入条件配置&#10;func (s *alertStore) upsertConditionConfig(tx *gorm.DB, alertConfigID uint, config *models.ConditionConfiguration) error {&#10;&#9;// 查找现有的条件配置（通过主配置记录的外键引用）&#10;&#9;var existingConfigID *uint&#10;&#9;err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, alertConfigID).Select(&quot;condition_config_id&quot;).First(&amp;existingConfigID).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to get existing condition config ID: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;if existingConfigID == nil || *existingConfigID == 0 {&#10;&#9;&#9;// 不存在则创建新的&#10;&#9;&#9;config.ID = 0&#10;&#9;&#9;if err := tx.Create(config).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create condition configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;// 更新主配置记录中的引用ID&#10;&#9;&#9;if err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, alertConfigID).Update(&quot;condition_config_id&quot;, config.ID).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update condition config reference: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;} else {&#10;&#9;&#9;// 存在则更新&#10;&#9;&#9;updateData := map[string]interface{}{&#10;&#9;&#9;&#9;&quot;condition&quot;:       config.Condition,&#10;&#9;&#9;&#9;&quot;count_condition&quot;: config.CountCondition,&#10;&#9;&#9;}&#10;&#9;&#9;if err := tx.Model(&amp;models.ConditionConfiguration{}).Where(&quot;id = ?&quot;, *existingConfigID).Updates(updateData).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update condition configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;config.ID = *existingConfigID&#10;&#9;}&#10;&#10;&#9;return nil&#10;}&#10;&#10;// upsertGroupConfig 更新或插入分组配置&#10;func (s *alertStore) upsertGroupConfig(tx *gorm.DB, alertConfigID uint, config *models.GroupConfiguration) error {&#10;&#9;// 查找现有的分组配置（通过主配置记录的外键引用）&#10;&#9;var existingConfigID *uint&#10;&#9;err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, alertConfigID).Select(&quot;group_config_id&quot;).First(&amp;existingConfigID).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to get existing group config ID: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;if existingConfigID == nil || *existingConfigID == 0 {&#10;&#9;&#9;// 不存在则创建新的&#10;&#9;&#9;config.ID = 0&#10;&#9;&#9;if err := tx.Create(config).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create group configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;// 更新主配置记录中的引用ID&#10;&#9;&#9;if err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, alertConfigID).Update(&quot;group_config_id&quot;, config.ID).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update group config reference: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;} else {&#10;&#9;&#9;// 存在则更新&#10;&#9;&#9;updateData := map[string]interface{}{&#10;&#9;&#9;&#9;&quot;fields&quot;: config.Fields,&#10;&#9;&#9;&#9;&quot;type&quot;:   config.Type,&#10;&#9;&#9;}&#10;&#9;&#9;if err := tx.Model(&amp;models.GroupConfiguration{}).Where(&quot;id = ?&quot;, *existingConfigID).Updates(updateData).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update group configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;config.ID = *existingConfigID&#10;&#9;}&#10;&#10;&#9;return nil&#10;}&#10;&#10;// upsertPolicyConfig 更新或插入策略配置&#10;func (s *alertStore) upsertPolicyConfig(tx *gorm.DB, alertConfigID uint, config *models.PolicyConfiguration) error {&#10;&#9;// 查找现有的策略配置（通过主配置记录的外键引用）&#10;&#9;var existingConfigID *uint&#10;&#9;err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, alertConfigID).Select(&quot;policy_config_id&quot;).First(&amp;existingConfigID).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to get existing policy config ID: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;if existingConfigID == nil || *existingConfigID == 0 {&#10;&#9;&#9;// 不存在则创建新的&#10;&#9;&#9;config.ID = 0&#10;&#9;&#9;if err := tx.Create(config).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create policy configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;// 更新主配置记录中的引用ID&#10;&#9;&#9;if err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, alertConfigID).Update(&quot;policy_config_id&quot;, config.ID).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update policy config reference: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;} else {&#10;&#9;&#9;// 存在则更新&#10;&#9;&#9;updateData := map[string]interface{}{&#10;&#9;&#9;&#9;&quot;alert_policy_id&quot;:  config.AlertPolicyId,&#10;&#9;&#9;&#9;&quot;action_policy_id&quot;: config.ActionPolicyId,&#10;&#9;&#9;&#9;&quot;repeat_interval&quot;:  config.RepeatInterval,&#10;&#9;&#9;}&#10;&#9;&#9;if err := tx.Model(&amp;models.PolicyConfiguration{}).Where(&quot;id = ?&quot;, *existingConfigID).Updates(updateData).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update policy configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;config.ID = *existingConfigID&#10;&#9;}&#10;&#10;&#9;return nil&#10;}&#10;&#10;// upsertTemplateConfig 更新或插入模板配置&#10;func (s *alertStore) upsertTemplateConfig(tx *gorm.DB, alertConfigID uint, config *models.TemplateConfiguration) error {&#10;&#9;// 查找现有的模板配置（通过主配置记录的外键引用）&#10;&#9;var existingConfigID *uint&#10;&#9;err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, alertConfigID).Select(&quot;template_config_id&quot;).First(&amp;existingConfigID).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to get existing template config ID: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;if existingConfigID == nil || *existingConfigID == 0 {&#10;&#9;&#9;// 不存在则创建新的&#10;&#9;&#9;config.ID = 0&#10;&#9;&#9;if err := tx.Create(config).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create template configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;// 更新主配置记录中的引用ID&#10;&#9;&#9;if err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, alertConfigID).Update(&quot;template_config_id&quot;, config.ID).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update template config reference: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;} else {&#10;&#9;&#9;// 存在则更新&#10;&#9;&#9;updateData := map[string]interface{}{&#10;&#9;&#9;&#9;&quot;template_id&quot;: config.TemplateId,&#10;&#9;&#9;&#9;&quot;lang&quot;:        config.Lang,&#10;&#9;&#9;&#9;&quot;type&quot;:        config.Type,&#10;&#9;&#9;&#9;&quot;version&quot;:     config.Version,&#10;&#9;&#9;&#9;&quot;aonotations&quot;: config.Aonotations,&#10;&#9;&#9;&#9;&quot;tokens&quot;:      config.Tokens,&#10;&#9;&#9;}&#10;&#9;&#9;if err := tx.Model(&amp;models.TemplateConfiguration{}).Where(&quot;id = ?&quot;, *existingConfigID).Updates(updateData).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update template configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;config.ID = *existingConfigID&#10;&#9;}&#10;&#10;&#9;return nil&#10;}&#10;&#10;// upsertSinkAlerthubConfig 更新或插入 Sink Alerthub 配置&#10;func (s *alertStore) upsertSinkAlerthubConfig(tx *gorm.DB, alertConfigID uint, config *models.SinkAlerthubConfiguration) error {&#10;&#9;// 查找现有的配置（通过主配置记录的外键引用）&#10;&#9;var existingConfigID *uint&#10;&#9;err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, alertConfigID).Select(&quot;sink_alerthub_config_id&quot;).First(&amp;existingConfigID).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to get existing sink alerthub config ID: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;if existingConfigID == nil || *existingConfigID == 0 {&#10;&#9;&#9;// 不存在则创建新的&#10;&#9;&#9;config.ID = 0&#10;&#9;&#9;if err := tx.Create(config).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create sink alerthub configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;// 更新主配置记录中的引用ID&#10;&#9;&#9;if err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, alertConfigID).Update(&quot;sink_alerthub_config_id&quot;, config.ID).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update sink alerthub config reference: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;} else {&#10;&#9;&#9;// 存在则更新&#10;&#9;&#9;updateData := map[string]interface{}{&#10;&#9;&#9;&#9;&quot;enabled&quot;: config.Enabled,&#10;&#9;&#9;}&#10;&#9;&#9;if err := tx.Model(&amp;models.SinkAlerthubConfiguration{}).Where(&quot;id = ?&quot;, *existingConfigID).Updates(updateData).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update sink alerthub configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;config.ID = *existingConfigID&#10;&#9;}&#10;&#10;&#9;return nil&#10;}&#10;&#10;// upsertSinkCmsConfig 更新或插入 Sink CMS 配置&#10;func (s *alertStore) upsertSinkCmsConfig(tx *gorm.DB, alertConfigID uint, config *models.SinkCmsConfiguration) error {&#10;&#9;// 查找现有的配置（通过主配置记录的外键引用）&#10;&#9;var existingConfigID *uint&#10;&#9;err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, alertConfigID).Select(&quot;sink_cms_config_id&quot;).First(&amp;existingConfigID).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to get existing sink cms config ID: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;if existingConfigID == nil || *existingConfigID == 0 {&#10;&#9;&#9;// 不存在则创建新的&#10;&#9;&#9;config.ID = 0&#10;&#9;&#9;if err := tx.Create(config).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create sink cms configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;// 更新主配置记录中的引用ID&#10;&#9;&#9;if err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, alertConfigID).Update(&quot;sink_cms_config_id&quot;, config.ID).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update sink cms config reference: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;} else {&#10;&#9;&#9;// 存在则更新&#10;&#9;&#9;updateData := map[string]interface{}{&#10;&#9;&#9;&#9;&quot;enabled&quot;: config.Enabled,&#10;&#9;&#9;}&#10;&#9;&#9;if err := tx.Model(&amp;models.SinkCmsConfiguration{}).Where(&quot;id = ?&quot;, *existingConfigID).Updates(updateData).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update sink cms configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;config.ID = *existingConfigID&#10;&#9;}&#10;&#10;&#9;return nil&#10;}&#10;&#10;// upsertSinkEventStoreConfig 更新或插入 Sink Event Store 配置&#10;func (s *alertStore) upsertSinkEventStoreConfig(tx *gorm.DB, alertConfigID uint, config *models.SinkEventStoreConfiguration) error {&#10;&#9;// 查找现有的配置（通过主配置记录的外键引用）&#10;&#9;var existingConfigID *uint&#10;&#9;err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, alertConfigID).Select(&quot;sink_event_store_config_id&quot;).First(&amp;existingConfigID).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to get existing sink event store config ID: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;if existingConfigID == nil || *existingConfigID == 0 {&#10;&#9;&#9;// 不存在则创建新的&#10;&#9;&#9;config.ID = 0&#10;&#9;&#9;if err := tx.Create(config).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create sink event store configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;// 更新主配置记录中的引用ID&#10;&#9;&#9;if err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, alertConfigID).Update(&quot;sink_event_store_config_id&quot;, config.ID).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update sink event store config reference: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;} else {&#10;&#9;&#9;// 存在则更新&#10;&#9;&#9;updateData := map[string]interface{}{&#10;&#9;&#9;&#9;&quot;enabled&quot;:     config.Enabled,&#10;&#9;&#9;&#9;&quot;endpoint&quot;:    config.Endpoint,&#10;&#9;&#9;&#9;&quot;event_store&quot;: config.EventStore,&#10;&#9;&#9;&#9;&quot;project&quot;:     config.Project,&#10;&#9;&#9;&#9;&quot;role_arn&quot;:    config.RoleArn,&#10;&#9;&#9;}&#10;&#9;&#9;if err := tx.Model(&amp;models.SinkEventStoreConfiguration{}).Where(&quot;id = ?&quot;, *existingConfigID).Updates(updateData).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update sink event store configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;config.ID = *existingConfigID&#10;&#9;}&#10;&#10;&#9;return nil&#10;}&#10;" />
              <option name="updatedContent" value="package store&#10;&#10;import (&#10;&#9;&quot;context&quot;&#10;&#9;&quot;fmt&quot;&#10;&#10;&#9;&quot;github.com/Ghostbaby/sls-migrate/internal/models&quot;&#10;&#9;&quot;github.com/Ghostbaby/sls-migrate/pkg/database&quot;&#10;&#9;&quot;gorm.io/gorm&quot;&#10;)&#10;&#10;// AlertStore Alert 数据存储接口&#10;type AlertStore interface {&#10;&#9;Create(ctx context.Context, alert *models.Alert) error&#10;&#9;GetByID(ctx context.Context, id uint) (*models.Alert, error)&#10;&#9;GetByName(ctx context.Context, name string) (*models.Alert, error)&#10;&#9;Update(ctx context.Context, alert *models.Alert) error&#10;&#9;Delete(ctx context.Context, id uint) error&#10;&#9;List(ctx context.Context, offset, limit int) ([]*models.Alert, int64, error)&#10;&#9;ListByStatus(ctx context.Context, status string, offset, limit int) ([]*models.Alert, int64, error)&#10;&#9;CreateWithTransaction(ctx context.Context, alert *models.Alert) error&#10;&#9;UpdateWithTransaction(ctx context.Context, alert *models.Alert) error&#10;&#9;Count(ctx context.Context) (int64, error)&#10;}&#10;&#10;// alertStore Alert 数据存储实现&#10;type alertStore struct {&#10;&#9;db *gorm.DB&#10;}&#10;&#10;// NewAlertStore 创建新的 AlertStore 实例&#10;func NewAlertStore() AlertStore {&#10;&#9;return &amp;alertStore{&#10;&#9;&#9;db: database.DB,&#10;&#9;}&#10;}&#10;&#10;// Create 创建 Alert&#10;func (s *alertStore) Create(ctx context.Context, alert *models.Alert) error {&#10;&#9;return s.db.WithContext(ctx).Create(alert).Error&#10;}&#10;&#10;// GetByID 根据 ID 获取 Alert&#10;func (s *alertStore) GetByID(ctx context.Context, id uint) (*models.Alert, error) {&#10;&#9;var alert models.Alert&#10;&#9;err := s.db.WithContext(ctx).&#10;&#9;&#9;Preload(&quot;Configuration&quot;).&#10;&#9;&#9;Preload(&quot;Configuration.ConditionConfig&quot;).&#10;&#9;&#9;Preload(&quot;Configuration.GroupConfig&quot;).&#10;&#9;&#9;Preload(&quot;Configuration.PolicyConfig&quot;).&#10;&#9;&#9;Preload(&quot;Configuration.TemplateConfig&quot;).&#10;&#9;&#9;Preload(&quot;Configuration.SeverityConfigs&quot;).&#10;&#9;&#9;Preload(&quot;Schedule&quot;).&#10;&#9;&#9;Preload(&quot;Tags&quot;).&#10;&#9;&#9;Preload(&quot;Queries&quot;).&#10;&#9;&#9;First(&amp;alert, id).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#9;return &amp;alert, nil&#10;}&#10;&#10;// GetByName 根据名称获取 Alert&#10;func (s *alertStore) GetByName(ctx context.Context, name string) (*models.Alert, error) {&#10;&#9;var alert models.Alert&#10;&#9;err := s.db.WithContext(ctx).&#10;&#9;&#9;Preload(&quot;Configuration&quot;).&#10;&#9;&#9;Preload(&quot;Configuration.ConditionConfig&quot;).&#10;&#9;&#9;Preload(&quot;Configuration.GroupConfig&quot;).&#10;&#9;&#9;Preload(&quot;Configuration.PolicyConfig&quot;).&#10;&#9;&#9;Preload(&quot;Configuration.TemplateConfig&quot;).&#10;&#9;&#9;Preload(&quot;Configuration.SeverityConfigs&quot;).&#10;&#9;&#9;Preload(&quot;Schedule&quot;).&#10;&#9;&#9;Preload(&quot;Tags&quot;).&#10;&#9;&#9;Preload(&quot;Queries&quot;).&#10;&#9;&#9;Where(&quot;name = ?&quot;, name).&#10;&#9;&#9;First(&amp;alert).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#9;return &amp;alert, nil&#10;}&#10;&#10;// Update 更新 Alert&#10;func (s *alertStore) Update(ctx context.Context, alert *models.Alert) error {&#10;&#9;return s.db.WithContext(ctx).Save(alert).Error&#10;}&#10;&#10;// Delete 删除 Alert&#10;func (s *alertStore) Delete(ctx context.Context, id uint) error {&#10;&#9;return s.db.WithContext(ctx).Transaction(func(tx *gorm.DB) error {&#10;&#9;&#9;// 步骤1: 删除所有关联的子表数据&#10;&#9;&#9;if err := s.deleteConfigurationAssociations(tx, id); err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to delete configuration associations: %w&quot;, err)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤2: 删除 Configuration 记录&#10;&#9;&#9;if err := tx.Where(&quot;alert_id = ?&quot;, id).Delete(&amp;models.AlertConfiguration{}).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to delete alert configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤3: 删除 Schedule 记录&#10;&#9;&#9;if err := tx.Where(&quot;alert_id = ?&quot;, id).Delete(&amp;models.AlertSchedule{}).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to delete alert schedule: %w&quot;, err)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤4: 删除 Tags 记录&#10;&#9;&#9;if err := tx.Where(&quot;alert_id = ?&quot;, id).Delete(&amp;models.AlertTag{}).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to delete alert tags: %w&quot;, err)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤5: 删除 Queries 记录&#10;&#9;&#9;if err := tx.Where(&quot;alert_id = ?&quot;, id).Delete(&amp;models.AlertQuery{}).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to delete alert queries: %w&quot;, err)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤6: 最后删除主记录&#10;&#9;&#9;if err := tx.Delete(&amp;models.Alert{}, id).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to delete alert: %w&quot;, err)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;return nil&#10;&#9;})&#10;}&#10;&#10;// List 分页获取 Alert 列表&#10;func (s *alertStore) List(ctx context.Context, offset, limit int) ([]*models.Alert, int64, error) {&#10;&#9;var alerts []*models.Alert&#10;&#9;var total int64&#10;&#10;&#9;// 获取总数&#10;&#9;if err := s.db.WithContext(ctx).Model(&amp;models.Alert{}).Count(&amp;total).Error; err != nil {&#10;&#9;&#9;return nil, 0, err&#10;&#9;}&#10;&#10;&#9;// 获取分页数据&#10;&#9;err := s.db.WithContext(ctx).&#10;&#9;&#9;Preload(&quot;Configuration&quot;).&#10;&#9;&#9;Preload(&quot;Schedule&quot;).&#10;&#9;&#9;Preload(&quot;Tags&quot;).&#10;&#9;&#9;Preload(&quot;Queries&quot;).&#10;&#9;&#9;Offset(offset).&#10;&#9;&#9;Limit(limit).&#10;&#9;&#9;Order(&quot;created_at DESC&quot;).&#10;&#9;&#9;Find(&amp;alerts).Error&#10;&#10;&#9;return alerts, total, err&#10;}&#10;&#10;// ListByStatus 根据状态分页获取 Alert 列表&#10;func (s *alertStore) ListByStatus(ctx context.Context, status string, offset, limit int) ([]*models.Alert, int64, error) {&#10;&#9;var alerts []*models.Alert&#10;&#9;var total int64&#10;&#10;&#9;// 获取总数&#10;&#9;if err := s.db.WithContext(ctx).Model(&amp;models.Alert{}).Where(&quot;status = ?&quot;, status).Count(&amp;total).Error; err != nil {&#10;&#9;&#9;return nil, 0, err&#10;&#9;}&#10;&#10;&#9;// 获取分页数据&#10;&#9;err := s.db.WithContext(ctx).&#10;&#9;&#9;Preload(&quot;Configuration&quot;).&#10;&#9;&#9;Preload(&quot;Schedule&quot;).&#10;&#9;&#9;Preload(&quot;Tags&quot;).&#10;&#9;&#9;Preload(&quot;Queries&quot;).&#10;&#9;&#9;Where(&quot;status = ?&quot;, status).&#10;&#9;&#9;Offset(offset).&#10;&#9;&#9;Limit(limit).&#10;&#9;&#9;Order(&quot;created_at DESC&quot;).&#10;&#9;&#9;Find(&amp;alerts).Error&#10;&#10;&#9;return alerts, total, err&#10;}&#10;&#10;// CreateWithTransaction 在事务中创建 Alert 及其关联数据&#10;func (s *alertStore) CreateWithTransaction(ctx context.Context, alert *models.Alert) error {&#10;&#9;return s.db.WithContext(ctx).Transaction(func(tx *gorm.DB) error {&#10;&#9;&#9;// 保存关联数据的引用&#10;&#9;&#9;originalConfig := alert.Configuration&#10;&#9;&#9;originalSchedule := alert.Schedule&#10;&#9;&#9;originalTags := alert.Tags&#10;&#9;&#9;originalQueries := alert.Queries&#10;&#10;&#9;&#9;// 调试输出&#10;&#9;&#9;fmt.Printf(&quot;DEBUG: Creating alert %s\n&quot;, alert.Name)&#10;&#9;&#9;fmt.Printf(&quot;DEBUG: originalConfig is nil: %v\n&quot;, originalConfig == nil)&#10;&#9;&#9;if originalConfig != nil {&#10;&#9;&#9;&#9;fmt.Printf(&quot;DEBUG: originalConfig has data: Type=%v, Version=%v\n&quot;,&#10;&#9;&#9;&#9;&#9;originalConfig.Type, originalConfig.Version)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤1: 创建纯净的 Alert 主记录（不包含关联数据）&#10;&#9;&#9;cleanAlert := models.Alert{&#10;&#9;&#9;&#9;Name:             alert.Name,&#10;&#9;&#9;&#9;DisplayName:      alert.DisplayName,&#10;&#9;&#9;&#9;Description:      alert.Description,&#10;&#9;&#9;&#9;Status:           alert.Status,&#10;&#9;&#9;&#9;CreateTime:       alert.CreateTime,&#10;&#9;&#9;&#9;LastModifiedTime: alert.LastModifiedTime,&#10;&#9;&#9;}&#10;&#10;&#9;&#9;if err := tx.Create(&amp;cleanAlert).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create alert: %w&quot;, err)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 更新原始alert的ID&#10;&#9;&#9;alert.ID = cleanAlert.ID&#10;&#10;&#9;&#9;// 步骤2: 创建所有独立的配置表记录&#10;&#9;&#9;if originalConfig != nil {&#10;&#9;&#9;&#9;// 创建独立的配置表记录&#10;&#9;&#9;&#9;if originalConfig.ConditionConfig != nil {&#10;&#9;&#9;&#9;&#9;if err := tx.Create(originalConfig.ConditionConfig).Error; err != nil {&#10;&#9;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create condition configuration: %w&quot;, err)&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;originalConfig.ConditionConfigID = &amp;originalConfig.ConditionConfig.ID&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;if originalConfig.GroupConfig != nil {&#10;&#9;&#9;&#9;&#9;if err := tx.Create(originalConfig.GroupConfig).Error; err != nil {&#10;&#9;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create group configuration: %w&quot;, err)&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;originalConfig.GroupConfigID = &amp;originalConfig.GroupConfig.ID&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;if originalConfig.PolicyConfig != nil {&#10;&#9;&#9;&#9;&#9;if err := tx.Create(originalConfig.PolicyConfig).Error; err != nil {&#10;&#9;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create policy configuration: %w&quot;, err)&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;originalConfig.PolicyConfigID = &amp;originalConfig.PolicyConfig.ID&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;if originalConfig.TemplateConfig != nil {&#10;&#9;&#9;&#9;&#9;if err := tx.Create(originalConfig.TemplateConfig).Error; err != nil {&#10;&#9;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create template configuration: %w&quot;, err)&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;originalConfig.TemplateConfigID = &amp;originalConfig.TemplateConfig.ID&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// 创建 Sink 配置&#10;&#9;&#9;&#9;if originalConfig.SinkAlerthubConfig != nil {&#10;&#9;&#9;&#9;&#9;if err := tx.Create(originalConfig.SinkAlerthubConfig).Error; err != nil {&#10;&#9;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create sink alerthub configuration: %w&quot;, err)&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;originalConfig.SinkAlerthubConfigID = &amp;originalConfig.SinkAlerthubConfig.ID&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;if originalConfig.SinkCmsConfig != nil {&#10;&#9;&#9;&#9;&#9;if err := tx.Create(originalConfig.SinkCmsConfig).Error; err != nil {&#10;&#9;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create sink cms configuration: %w&quot;, err)&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;originalConfig.SinkCmsConfigID = &amp;originalConfig.SinkCmsConfig.ID&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;if originalConfig.SinkEventStoreConfig != nil {&#10;&#9;&#9;&#9;&#9;if err := tx.Create(originalConfig.SinkEventStoreConfig).Error; err != nil {&#10;&#9;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create sink event store configuration: %w&quot;, err)&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;originalConfig.SinkEventStoreConfigID = &amp;originalConfig.SinkEventStoreConfig.ID&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// 步骤3: 创建 alert_configurations 记录&#10;&#9;&#9;&#9;configToCreate := models.AlertConfiguration{&#10;&#9;&#9;&#9;&#9;AlertID:                alert.ID,&#10;&#9;&#9;&#9;&#9;AutoAnnotation:         originalConfig.AutoAnnotation,&#10;&#9;&#9;&#9;&#9;Dashboard:              originalConfig.Dashboard,&#10;&#9;&#9;&#9;&#9;MuteUntil:              originalConfig.MuteUntil,&#10;&#9;&#9;&#9;&#9;NoDataFire:             originalConfig.NoDataFire,&#10;&#9;&#9;&#9;&#9;NoDataSeverity:         originalConfig.NoDataSeverity,&#10;&#9;&#9;&#9;&#9;Threshold:              originalConfig.Threshold,&#10;&#9;&#9;&#9;&#9;Type:                   originalConfig.Type,&#10;&#9;&#9;&#9;&#9;Version:                originalConfig.Version,&#10;&#9;&#9;&#9;&#9;SendResolved:           originalConfig.SendResolved,&#10;&#9;&#9;&#9;&#9;ConditionConfigID:      originalConfig.ConditionConfigID,&#10;&#9;&#9;&#9;&#9;GroupConfigID:          originalConfig.GroupConfigID,&#10;&#9;&#9;&#9;&#9;PolicyConfigID:         originalConfig.PolicyConfigID,&#10;&#9;&#9;&#9;&#9;TemplateConfigID:       originalConfig.TemplateConfigID,&#10;&#9;&#9;&#9;&#9;SinkAlerthubConfigID:   originalConfig.SinkAlerthubConfigID,&#10;&#9;&#9;&#9;&#9;SinkCmsConfigID:        originalConfig.SinkCmsConfigID,&#10;&#9;&#9;&#9;&#9;SinkEventStoreConfigID: originalConfig.SinkEventStoreConfigID,&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;if err := tx.Create(&amp;configToCreate).Error; err != nil {&#10;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create alert configuration: %w&quot;, err)&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;originalConfig.ID = configToCreate.ID&#10;&#9;&#9;&#9;alert.ConfigurationID = &amp;configToCreate.ID&#10;&#10;&#9;&#9;&#9;// 步骤4: 创建依赖于alert_configurations的记录&#10;&#9;&#9;&#9;if len(originalConfig.SeverityConfigs) &gt; 0 {&#10;&#9;&#9;&#9;&#9;for i := range originalConfig.SeverityConfigs {&#10;&#9;&#9;&#9;&#9;&#9;// 如果有 EvalCondition，先创建它&#10;&#9;&#9;&#9;&#9;&#9;if originalConfig.SeverityConfigs[i].EvalCondition != nil {&#10;&#9;&#9;&#9;&#9;&#9;&#9;if err := tx.Create(originalConfig.SeverityConfigs[i].EvalCondition).Error; err != nil {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create eval condition: %w&quot;, err)&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;originalConfig.SeverityConfigs[i].EvalConditionID = &amp;originalConfig.SeverityConfigs[i].EvalCondition.ID&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;&#9;originalConfig.SeverityConfigs[i].AlertConfigID = configToCreate.ID&#10;&#9;&#9;&#9;&#9;&#9;originalConfig.SeverityConfigs[i].ID = 0&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;if err := tx.Create(&amp;originalConfig.SeverityConfigs).Error; err != nil {&#10;&#9;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create severity configurations: %w&quot;, err)&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;if len(originalConfig.JoinConfigs) &gt; 0 {&#10;&#9;&#9;&#9;&#9;for i := range originalConfig.JoinConfigs {&#10;&#9;&#9;&#9;&#9;&#9;originalConfig.JoinConfigs[i].AlertConfigID = configToCreate.ID&#10;&#9;&#9;&#9;&#9;&#9;originalConfig.JoinConfigs[i].ID = 0&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;if err := tx.Create(&amp;originalConfig.JoinConfigs).Error; err != nil {&#10;&#9;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create join configurations: %w&quot;, err)&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤5: 创建 Schedule&#10;&#9;&#9;if originalSchedule != nil {&#10;&#9;&#9;&#9;scheduleToCreate := models.AlertSchedule{&#10;&#9;&#9;&#9;&#9;AlertID:        alert.ID,&#10;&#9;&#9;&#9;&#9;CronExpression: originalSchedule.CronExpression,&#10;&#9;&#9;&#9;&#9;Delay:          originalSchedule.Delay,&#10;&#9;&#9;&#9;&#9;Interval:       originalSchedule.Interval,&#10;&#9;&#9;&#9;&#9;RunImmediately: originalSchedule.RunImmediately,&#10;&#9;&#9;&#9;&#9;TimeZone:       originalSchedule.TimeZone,&#10;&#9;&#9;&#9;&#9;Type:           originalSchedule.Type,&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;if err := tx.Create(&amp;scheduleToCreate).Error; err != nil {&#10;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create alert schedule: %w&quot;, err)&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;alert.ScheduleID = &amp;scheduleToCreate.ID&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤6: 创建 Tags&#10;&#9;&#9;if len(originalTags) &gt; 0 {&#10;&#9;&#9;&#9;tagsToCreate := make([]models.AlertTag, len(originalTags))&#10;&#9;&#9;&#9;for i, tag := range originalTags {&#10;&#9;&#9;&#9;&#9;tagsToCreate[i] = models.AlertTag{&#10;&#9;&#9;&#9;&#9;&#9;AlertID:  alert.ID,&#10;&#9;&#9;&#9;&#9;&#9;TagType:  tag.TagType,&#10;&#9;&#9;&#9;&#9;&#9;TagKey:   tag.TagKey,&#10;&#9;&#9;&#9;&#9;&#9;TagValue: tag.TagValue,&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;if err := tx.Create(&amp;tagsToCreate).Error; err != nil {&#10;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create alert tags: %w&quot;, err)&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤7: 创建 Queries&#10;&#9;&#9;if len(originalQueries) &gt; 0 {&#10;&#9;&#9;&#9;queriesToCreate := make([]models.AlertQuery, len(originalQueries))&#10;&#9;&#9;&#9;for i, query := range originalQueries {&#10;&#9;&#9;&#9;&#9;queriesToCreate[i] = models.AlertQuery{&#10;&#9;&#9;&#9;&#9;&#9;AlertID:      alert.ID,&#10;&#9;&#9;&#9;&#9;&#9;ChartTitle:   query.ChartTitle,&#10;&#9;&#9;&#9;&#9;&#9;DashboardId:  query.DashboardId,&#10;&#9;&#9;&#9;&#9;&#9;End:          query.End,&#10;&#9;&#9;&#9;&#9;&#9;PowerSqlMode: query.PowerSqlMode,&#10;&#9;&#9;&#9;&#9;&#9;Project:      query.Project,&#10;&#9;&#9;&#9;&#9;&#9;Query:        query.Query,&#10;&#9;&#9;&#9;&#9;&#9;Region:       query.Region,&#10;&#9;&#9;&#9;&#9;&#9;RoleArn:      query.RoleArn,&#10;&#9;&#9;&#9;&#9;&#9;Start:        query.Start,&#10;&#9;&#9;&#9;&#9;&#9;Store:        query.Store,&#10;&#9;&#9;&#9;&#9;&#9;StoreType:    query.StoreType,&#10;&#9;&#9;&#9;&#9;&#9;TimeSpanType: query.TimeSpanType,&#10;&#9;&#9;&#9;&#9;&#9;Ui:           query.Ui,&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;if err := tx.Create(&amp;queriesToCreate).Error; err != nil {&#10;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create alert queries: %w&quot;, err)&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤8: 最后更新主记录的关联ID&#10;&#9;&#9;updateData := map[string]interface{}{}&#10;&#9;&#9;if alert.ConfigurationID != nil {&#10;&#9;&#9;&#9;updateData[&quot;configuration_id&quot;] = *alert.ConfigurationID&#10;&#9;&#9;}&#10;&#9;&#9;if alert.ScheduleID != nil {&#10;&#9;&#9;&#9;updateData[&quot;schedule_id&quot;] = *alert.ScheduleID&#10;&#9;&#9;}&#10;&#10;&#9;&#9;if len(updateData) &gt; 0 {&#10;&#9;&#9;&#9;if err := tx.Model(&amp;models.Alert{}).Where(&quot;id = ?&quot;, alert.ID).Updates(updateData).Error; err != nil {&#10;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update alert with relation IDs: %w&quot;, err)&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;return nil&#10;&#9;})&#10;}&#10;&#10;// deleteConfigurationAssociations 删除 Configuration 的所有关联数据&#10;func (s *alertStore) deleteConfigurationAssociations(tx *gorm.DB, alertID uint) error {&#10;&#9;// 先获取 Configuration ID&#10;&#9;var configID uint&#10;&#9;if err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;alert_id = ?&quot;, alertID).Select(&quot;id&quot;).First(&amp;configID).Error; err != nil {&#10;&#9;&#9;if err == gorm.ErrRecordNotFound {&#10;&#9;&#9;&#9;return nil // 没有 Configuration，直接返回&#10;&#9;&#9;}&#10;&#9;&#9;return fmt.Errorf(&quot;failed to get configuration ID: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;// 删除所有关联的子表数据&#10;&#9;if err := tx.Where(&quot;alert_config_id = ?&quot;, configID).Delete(&amp;models.SeverityConfiguration{}).Error; err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to delete severity configurations: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;if err := tx.Where(&quot;alert_config_id = ?&quot;, configID).Delete(&amp;models.JoinConfiguration{}).Error; err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to delete join configurations: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;// 注意：这里不删除 Configuration 本身，因为主删除方法会处理&#10;&#9;return nil&#10;}&#10;&#10;// recreateConfiguration 重新创建 Configuration 及其关联数据&#10;func (s *alertStore) recreateConfiguration(tx *gorm.DB, alert *models.Alert) error {&#10;&#9;if alert.Configuration == nil {&#10;&#9;&#9;return nil&#10;&#9;}&#10;&#10;&#9;// 创建新的 Configuration&#10;&#9;configToCreate := models.AlertConfiguration{&#10;&#9;&#9;AlertID:        alert.ID,&#10;&#9;&#9;AutoAnnotation: alert.Configuration.AutoAnnotation,&#10;&#9;&#9;Dashboard:      alert.Configuration.Dashboard,&#10;&#9;&#9;MuteUntil:      alert.Configuration.MuteUntil,&#10;&#9;&#9;NoDataFire:     alert.Configuration.NoDataFire,&#10;&#9;&#9;NoDataSeverity: alert.Configuration.NoDataSeverity,&#10;&#9;&#9;Threshold:      alert.Configuration.Threshold,&#10;&#9;&#9;Type:           alert.Configuration.Type,&#10;&#9;&#9;Version:        alert.Configuration.Version,&#10;&#9;&#9;SendResolved:   alert.Configuration.SendResolved,&#10;&#9;}&#10;&#10;&#9;// 创建独立的配置表记录&#10;&#9;if alert.Configuration.ConditionConfig != nil {&#10;&#9;&#9;if err := tx.Create(alert.Configuration.ConditionConfig).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create condition configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;configToCreate.ConditionConfigID = &amp;alert.Configuration.ConditionConfig.ID&#10;&#9;}&#10;&#10;&#9;if alert.Configuration.GroupConfig != nil {&#10;&#9;&#9;if err := tx.Create(alert.Configuration.GroupConfig).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create group configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;configToCreate.GroupConfigID = &amp;alert.Configuration.GroupConfig.ID&#10;&#9;}&#10;&#10;&#9;if alert.Configuration.PolicyConfig != nil {&#10;&#9;&#9;if err := tx.Create(alert.Configuration.PolicyConfig).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create policy configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;configToCreate.PolicyConfigID = &amp;alert.Configuration.PolicyConfig.ID&#10;&#9;}&#10;&#10;&#9;if alert.Configuration.TemplateConfig != nil {&#10;&#9;&#9;if err := tx.Create(alert.Configuration.TemplateConfig).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create template configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;configToCreate.TemplateConfigID = &amp;alert.Configuration.TemplateConfig.ID&#10;&#9;}&#10;&#10;&#9;// 创建 Sink 配置&#10;&#9;if alert.Configuration.SinkAlerthubConfig != nil {&#10;&#9;&#9;if err := tx.Create(alert.Configuration.SinkAlerthubConfig).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create sink alerthub configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;configToCreate.SinkAlerthubConfigID = &amp;alert.Configuration.SinkAlerthubConfig.ID&#10;&#9;}&#10;&#10;&#9;if alert.Configuration.SinkCmsConfig != nil {&#10;&#9;&#9;if err := tx.Create(alert.Configuration.SinkCmsConfig).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create sink cms configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;configToCreate.SinkCmsConfigID = &amp;alert.Configuration.SinkCmsConfig.ID&#10;&#9;}&#10;&#10;&#9;if alert.Configuration.SinkEventStoreConfig != nil {&#10;&#9;&#9;if err := tx.Create(alert.Configuration.SinkEventStoreConfig).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create sink event store configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;configToCreate.SinkEventStoreConfigID = &amp;alert.Configuration.SinkEventStoreConfig.ID&#10;&#9;}&#10;&#10;&#9;// 创建 Configuration 记录&#10;&#9;if err := tx.Create(&amp;configToCreate).Error; err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to create alert configuration: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;alert.ConfigurationID = &amp;configToCreate.ID&#10;&#10;&#9;// 创建依赖于 alert_configurations 的记录&#10;&#9;if len(alert.Configuration.SeverityConfigs) &gt; 0 {&#10;&#9;&#9;for i := range alert.Configuration.SeverityConfigs {&#10;&#9;&#9;&#9;// 如果有 EvalCondition，先创建它&#10;&#9;&#9;&#9;if alert.Configuration.SeverityConfigs[i].EvalCondition != nil {&#10;&#9;&#9;&#9;&#9;if err := tx.Create(alert.Configuration.SeverityConfigs[i].EvalCondition).Error; err != nil {&#10;&#9;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create eval condition: %w&quot;, err)&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;alert.Configuration.SeverityConfigs[i].EvalConditionID = &amp;alert.Configuration.SeverityConfigs[i].EvalCondition.ID&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;alert.Configuration.SeverityConfigs[i].AlertConfigID = configToCreate.ID&#10;&#9;&#9;&#9;alert.Configuration.SeverityConfigs[i].ID = 0&#10;&#9;&#9;}&#10;&#9;&#9;if err := tx.Create(&amp;alert.Configuration.SeverityConfigs).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create severity configurations: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;if len(alert.Configuration.JoinConfigs) &gt; 0 {&#10;&#9;&#9;for i := range alert.Configuration.JoinConfigs {&#10;&#9;&#9;&#9;alert.Configuration.JoinConfigs[i].AlertConfigID = configToCreate.ID&#10;&#9;&#9;&#9;alert.Configuration.JoinConfigs[i].ID = 0&#10;&#9;&#9;}&#10;&#9;&#9;if err := tx.Create(&amp;alert.Configuration.JoinConfigs).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create join configurations: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;return nil&#10;}&#10;&#10;// UpdateWithTransaction 在事务中更新 Alert 及其关联数据&#10;func (s *alertStore) UpdateWithTransaction(ctx context.Context, alert *models.Alert) error {&#10;&#9;return s.db.WithContext(ctx).Transaction(func(tx *gorm.DB) error {&#10;&#9;&#9;// 确保 Alert ID 存在&#10;&#9;&#9;if alert.ID == 0 {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;alert ID is required for update&quot;)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤1: 更新主记录&#10;&#9;&#9;updateData := map[string]interface{}{&#10;&#9;&#9;&#9;&quot;display_name&quot;:       alert.DisplayName,&#10;&#9;&#9;&#9;&quot;description&quot;:        alert.Description,&#10;&#9;&#9;&#9;&quot;status&quot;:             alert.Status,&#10;&#9;&#9;&#9;&quot;last_modified_time&quot;: alert.LastModifiedTime,&#10;&#9;&#9;}&#10;&#10;&#9;&#9;if err := tx.Model(&amp;models.Alert{}).Where(&quot;id = ?&quot;, alert.ID).Updates(updateData).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update alert: %w&quot;, err)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤2: 处理 Configuration 更新&#10;&#9;&#9;if alert.Configuration != nil {&#10;&#9;&#9;&#9;// 先删除旧的关联数据（但不删除主配置记录）&#10;&#9;&#9;&#9;if err := s.deleteConfigurationAssociations(tx, alert.ID); err != nil {&#10;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to delete old configuration associations: %w&quot;, err)&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// 更新现有的 Configuration 记录&#10;&#9;&#9;&#9;if err := s.updateConfiguration(tx, alert); err != nil {&#10;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update configuration: %w&quot;, err)&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤3: 处理 Schedule 更新&#10;&#9;&#9;if alert.Schedule != nil {&#10;&#9;&#9;&#9;// 删除旧的 Schedule&#10;&#9;&#9;&#9;if err := tx.Where(&quot;alert_id = ?&quot;, alert.ID).Delete(&amp;models.AlertSchedule{}).Error; err != nil {&#10;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to delete old schedule: %w&quot;, err)&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// 创建新的 Schedule&#10;&#9;&#9;&#9;scheduleToCreate := models.AlertSchedule{&#10;&#9;&#9;&#9;&#9;AlertID:        alert.ID,&#10;&#9;&#9;&#9;&#9;CronExpression: alert.Schedule.CronExpression,&#10;&#9;&#9;&#9;&#9;Delay:          alert.Schedule.Delay,&#10;&#9;&#9;&#9;&#9;Interval:       alert.Schedule.Interval,&#10;&#9;&#9;&#9;&#9;RunImmediately: alert.Schedule.RunImmediately,&#10;&#9;&#9;&#9;&#9;TimeZone:       alert.Schedule.TimeZone,&#10;&#9;&#9;&#9;&#9;Type:           alert.Schedule.Type,&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;if err := tx.Create(&amp;scheduleToCreate).Error; err != nil {&#10;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create new schedule: %w&quot;, err)&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;alert.ScheduleID = &amp;scheduleToCreate.ID&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤4: 处理 Tags 更新&#10;&#9;&#9;if len(alert.Tags) &gt; 0 {&#10;&#9;&#9;&#9;// 删除旧的 Tags&#10;&#9;&#9;&#9;if err := tx.Where(&quot;alert_id = ?&quot;, alert.ID).Delete(&amp;models.AlertTag{}).Error; err != nil {&#10;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to delete old tags: %w&quot;, err)&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// 创建新的 Tags&#10;&#9;&#9;&#9;tagsToCreate := make([]models.AlertTag, len(alert.Tags))&#10;&#9;&#9;&#9;for i, tag := range alert.Tags {&#10;&#9;&#9;&#9;&#9;tagsToCreate[i] = models.AlertTag{&#10;&#9;&#9;&#9;&#9;&#9;AlertID:  alert.ID,&#10;&#9;&#9;&#9;&#9;&#9;TagType:  tag.TagType,&#10;&#9;&#9;&#9;&#9;&#9;TagKey:   tag.TagKey,&#10;&#9;&#9;&#9;&#9;&#9;TagValue: tag.TagValue,&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;if err := tx.Create(&amp;tagsToCreate).Error; err != nil {&#10;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create new tags: %w&quot;, err)&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤5: 处理 Queries 更新&#10;&#9;&#9;if len(alert.Queries) &gt; 0 {&#10;&#9;&#9;&#9;// 删除旧的 Queries&#10;&#9;&#9;&#9;if err := tx.Where(&quot;alert_id = ?&quot;, alert.ID).Delete(&amp;models.AlertQuery{}).Error; err != nil {&#10;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to delete old queries: %w&quot;, err)&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// 创建新的 Queries&#10;&#9;&#9;&#9;queriesToCreate := make([]models.AlertQuery, len(alert.Queries))&#10;&#9;&#9;&#9;for i, query := range alert.Queries {&#10;&#9;&#9;&#9;&#9;queriesToCreate[i] = models.AlertQuery{&#10;&#9;&#9;&#9;&#9;&#9;AlertID:      alert.ID,&#10;&#9;&#9;&#9;&#9;&#9;ChartTitle:   query.ChartTitle,&#10;&#9;&#9;&#9;&#9;&#9;DashboardId:  query.DashboardId,&#10;&#9;&#9;&#9;&#9;&#9;End:          query.End,&#10;&#9;&#9;&#9;&#9;&#9;PowerSqlMode: query.PowerSqlMode,&#10;&#9;&#9;&#9;&#9;&#9;Project:      query.Project,&#10;&#9;&#9;&#9;&#9;&#9;Query:        query.Query,&#10;&#9;&#9;&#9;&#9;&#9;Region:       query.Region,&#10;&#9;&#9;&#9;&#9;&#9;RoleArn:      query.RoleArn,&#10;&#9;&#9;&#9;&#9;&#9;Start:        query.Start,&#10;&#9;&#9;&#9;&#9;&#9;Store:        query.Store,&#10;&#9;&#9;&#9;&#9;&#9;StoreType:    query.StoreType,&#10;&#9;&#9;&#9;&#9;&#9;TimeSpanType: query.TimeSpanType,&#10;&#9;&#9;&#9;&#9;&#9;Ui:           query.Ui,&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;if err := tx.Create(&amp;queriesToCreate).Error; err != nil {&#10;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create new queries: %w&quot;, err)&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 步骤6: 更新主记录的关联ID&#10;&#9;&#9;updateData = map[string]interface{}{}&#10;&#9;&#9;if alert.ConfigurationID != nil {&#10;&#9;&#9;&#9;updateData[&quot;configuration_id&quot;] = *alert.ConfigurationID&#10;&#9;&#9;}&#10;&#9;&#9;if alert.ScheduleID != nil {&#10;&#9;&#9;&#9;updateData[&quot;schedule_id&quot;] = *alert.ScheduleID&#10;&#9;&#9;}&#10;&#10;&#9;&#9;if len(updateData) &gt; 0 {&#10;&#9;&#9;&#9;if err := tx.Model(&amp;models.Alert{}).Where(&quot;id = ?&quot;, alert.ID).Updates(updateData).Error; err != nil {&#10;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update alert with relation IDs: %w&quot;, err)&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;return nil&#10;&#9;})&#10;}&#10;&#10;// Count 获取 Alert 总数&#10;func (s *alertStore) Count(ctx context.Context) (int64, error) {&#10;&#9;var total int64&#10;&#9;err := s.db.WithContext(ctx).Model(&amp;models.Alert{}).Count(&amp;total).Error&#10;&#9;return total, err&#10;}&#10;&#10;// updateConfiguration 更新现有的 Configuration 及其关联数据&#10;func (s *alertStore) updateConfiguration(tx *gorm.DB, alert *models.Alert) error {&#10;&#9;if alert.Configuration == nil {&#10;&#9;&#9;return nil&#10;&#9;}&#10;&#10;&#9;// 获取现有的 Configuration ID&#10;&#9;var existingConfigID uint&#10;&#9;if err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;alert_id = ?&quot;, alert.ID).Select(&quot;id&quot;).First(&amp;existingConfigID).Error; err != nil {&#10;&#9;&#9;if err == gorm.ErrRecordNotFound {&#10;&#9;&#9;&#9;// 如果没有现有配置，则创建新的&#10;&#9;&#9;&#9;return s.recreateConfiguration(tx, alert)&#10;&#9;&#9;}&#10;&#9;&#9;return fmt.Errorf(&quot;failed to get existing configuration ID: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;// 更新主配置记录&#10;&#9;updateData := map[string]interface{}{&#10;&#9;&#9;&quot;auto_annotation&quot;:  alert.Configuration.AutoAnnotation,&#10;&#9;&#9;&quot;dashboard&quot;:        alert.Configuration.Dashboard,&#10;&#9;&#9;&quot;mute_until&quot;:       alert.Configuration.MuteUntil,&#10;&#9;&#9;&quot;no_data_fire&quot;:     alert.Configuration.NoDataFire,&#10;&#9;&#9;&quot;no_data_severity&quot;: alert.Configuration.NoDataSeverity,&#10;&#9;&#9;&quot;threshold&quot;:        alert.Configuration.Threshold,&#10;&#9;&#9;&quot;type&quot;:             alert.Configuration.Type,&#10;&#9;&#9;&quot;version&quot;:          alert.Configuration.Version,&#10;&#9;&#9;&quot;send_resolved&quot;:    alert.Configuration.SendResolved,&#10;&#9;}&#10;&#10;&#9;if err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, existingConfigID).Updates(updateData).Error; err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to update alert configuration: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;// 更新关联的配置记录 - 使用 upsert 逻辑避免重复&#10;&#9;if alert.Configuration.ConditionConfig != nil {&#10;&#9;&#9;if err := s.upsertConditionConfig(tx, existingConfigID, alert.Configuration.ConditionConfig); err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to upsert condition configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;if alert.Configuration.GroupConfig != nil {&#10;&#9;&#9;if err := s.upsertGroupConfig(tx, existingConfigID, alert.Configuration.GroupConfig); err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to upsert group configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;if alert.Configuration.PolicyConfig != nil {&#10;&#9;&#9;if err := s.upsertPolicyConfig(tx, existingConfigID, alert.Configuration.PolicyConfig); err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to upsert policy configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;if alert.Configuration.TemplateConfig != nil {&#10;&#9;&#9;if err := s.upsertTemplateConfig(tx, existingConfigID, alert.Configuration.TemplateConfig); err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to upsert template configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;// 更新 Sink 配置 - 使用 upsert 逻辑避免重复&#10;&#9;if alert.Configuration.SinkAlerthubConfig != nil {&#10;&#9;&#9;if err := s.upsertSinkAlerthubConfig(tx, existingConfigID, alert.Configuration.SinkAlerthubConfig); err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to upsert sink alerthub configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;if alert.Configuration.SinkCmsConfig != nil {&#10;&#9;&#9;if err := s.upsertSinkCmsConfig(tx, existingConfigID, alert.Configuration.SinkCmsConfig); err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to upsert sink cms configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;if alert.Configuration.SinkEventStoreConfig != nil {&#10;&#9;&#9;if err := s.upsertSinkEventStoreConfig(tx, existingConfigID, alert.Configuration.SinkEventStoreConfig); err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to upsert sink event store configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;// 更新依赖于 alert_configurations 的记录&#10;&#9;if len(alert.Configuration.SeverityConfigs) &gt; 0 {&#10;&#9;&#9;// 先删除旧的严重程度配置&#10;&#9;&#9;if err := tx.Where(&quot;alert_config_id = ?&quot;, existingConfigID).Delete(&amp;models.SeverityConfiguration{}).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to delete old severity configurations: %w&quot;, err)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 创建新的严重程度配置&#10;&#9;&#9;for i := range alert.Configuration.SeverityConfigs {&#10;&#9;&#9;&#9;// 如果有 EvalCondition，先创建它&#10;&#9;&#9;&#9;if alert.Configuration.SeverityConfigs[i].EvalCondition != nil {&#10;&#9;&#9;&#9;&#9;if err := tx.Create(alert.Configuration.SeverityConfigs[i].EvalCondition).Error; err != nil {&#10;&#9;&#9;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create eval condition: %w&quot;, err)&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;alert.Configuration.SeverityConfigs[i].EvalConditionID = &amp;alert.Configuration.SeverityConfigs[i].EvalCondition.ID&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;alert.Configuration.SeverityConfigs[i].AlertConfigID = existingConfigID&#10;&#9;&#9;&#9;alert.Configuration.SeverityConfigs[i].ID = 0&#10;&#9;&#9;}&#10;&#9;&#9;if err := tx.Create(&amp;alert.Configuration.SeverityConfigs).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create severity configurations: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;if len(alert.Configuration.JoinConfigs) &gt; 0 {&#10;&#9;&#9;// 先删除旧的 Join 配置&#10;&#9;&#9;if err := tx.Where(&quot;alert_config_id = ?&quot;, existingConfigID).Delete(&amp;models.JoinConfiguration{}).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to delete old join configurations: %w&quot;, err)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 创建新的 Join 配置&#10;&#9;&#9;for i := range alert.Configuration.JoinConfigs {&#10;&#9;&#9;&#9;alert.Configuration.JoinConfigs[i].AlertConfigID = existingConfigID&#10;&#9;&#9;&#9;alert.Configuration.JoinConfigs[i].ID = 0&#10;&#9;&#9;}&#10;&#9;&#9;if err := tx.Create(&amp;alert.Configuration.JoinConfigs).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create join configurations: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;// 设置主记录的配置ID&#10;&#9;alert.ConfigurationID = &amp;existingConfigID&#10;&#10;&#9;return nil&#10;}&#10;&#10;// upsertConditionConfig 更新或插入条件配置&#10;func (s *alertStore) upsertConditionConfig(tx *gorm.DB, alertConfigID uint, config *models.ConditionConfiguration) error {&#10;&#9;// 查找现有的条件配置（通过主配置记录的外键引用）&#10;&#9;var existingConfigID *uint&#10;&#9;err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, alertConfigID).Select(&quot;condition_config_id&quot;).First(&amp;existingConfigID).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to get existing condition config ID: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;if existingConfigID == nil || *existingConfigID == 0 {&#10;&#9;&#9;// 不存在则创建新的&#10;&#9;&#9;config.ID = 0&#10;&#9;&#9;if err := tx.Create(config).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create condition configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;// 更新主配置记录中的引用ID&#10;&#9;&#9;if err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, alertConfigID).Update(&quot;condition_config_id&quot;, config.ID).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update condition config reference: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;} else {&#10;&#9;&#9;// 存在则更新&#10;&#9;&#9;updateData := map[string]interface{}{&#10;&#9;&#9;&#9;&quot;condition&quot;:       config.Condition,&#10;&#9;&#9;&#9;&quot;count_condition&quot;: config.CountCondition,&#10;&#9;&#9;}&#10;&#9;&#9;if err := tx.Model(&amp;models.ConditionConfiguration{}).Where(&quot;id = ?&quot;, *existingConfigID).Updates(updateData).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update condition configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;config.ID = *existingConfigID&#10;&#9;}&#10;&#10;&#9;return nil&#10;}&#10;&#10;// upsertGroupConfig 更新或插入分组配置&#10;func (s *alertStore) upsertGroupConfig(tx *gorm.DB, alertConfigID uint, config *models.GroupConfiguration) error {&#10;&#9;// 查找现有的分组配置（通过主配置记录的外键引用）&#10;&#9;var existingConfigID *uint&#10;&#9;err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, alertConfigID).Select(&quot;group_config_id&quot;).First(&amp;existingConfigID).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to get existing group config ID: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;if existingConfigID == nil || *existingConfigID == 0 {&#10;&#9;&#9;// 不存在则创建新的&#10;&#9;&#9;config.ID = 0&#10;&#9;&#9;if err := tx.Create(config).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create group configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;// 更新主配置记录中的引用ID&#10;&#9;&#9;if err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, alertConfigID).Update(&quot;group_config_id&quot;, config.ID).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update group config reference: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;} else {&#10;&#9;&#9;// 存在则更新&#10;&#9;&#9;updateData := map[string]interface{}{&#10;&#9;&#9;&#9;&quot;fields&quot;: config.Fields,&#10;&#9;&#9;&#9;&quot;type&quot;:   config.Type,&#10;&#9;&#9;}&#10;&#9;&#9;if err := tx.Model(&amp;models.GroupConfiguration{}).Where(&quot;id = ?&quot;, *existingConfigID).Updates(updateData).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update group configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;config.ID = *existingConfigID&#10;&#9;}&#10;&#10;&#9;return nil&#10;}&#10;&#10;// upsertPolicyConfig 更新或插入策略配置&#10;func (s *alertStore) upsertPolicyConfig(tx *gorm.DB, alertConfigID uint, config *models.PolicyConfiguration) error {&#10;&#9;// 查找现有的策略配置（通过主配置记录的外键引用）&#10;&#9;var existingConfigID *uint&#10;&#9;err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, alertConfigID).Select(&quot;policy_config_id&quot;).First(&amp;existingConfigID).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to get existing policy config ID: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;if existingConfigID == nil || *existingConfigID == 0 {&#10;&#9;&#9;// 不存在则创建新的&#10;&#9;&#9;config.ID = 0&#10;&#9;&#9;if err := tx.Create(config).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create policy configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;// 更新主配置记录中的引用ID&#10;&#9;&#9;if err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, alertConfigID).Update(&quot;policy_config_id&quot;, config.ID).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update policy config reference: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;} else {&#10;&#9;&#9;// 存在则更新&#10;&#9;&#9;updateData := map[string]interface{}{&#10;&#9;&#9;&#9;&quot;alert_policy_id&quot;:  config.AlertPolicyId,&#10;&#9;&#9;&#9;&quot;action_policy_id&quot;: config.ActionPolicyId,&#10;&#9;&#9;&#9;&quot;repeat_interval&quot;:  config.RepeatInterval,&#10;&#9;&#9;}&#10;&#9;&#9;if err := tx.Model(&amp;models.PolicyConfiguration{}).Where(&quot;id = ?&quot;, *existingConfigID).Updates(updateData).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update policy configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;config.ID = *existingConfigID&#10;&#9;}&#10;&#10;&#9;return nil&#10;}&#10;&#10;// upsertTemplateConfig 更新或插入模板配置&#10;func (s *alertStore) upsertTemplateConfig(tx *gorm.DB, alertConfigID uint, config *models.TemplateConfiguration) error {&#10;&#9;// 查找现有的模板配置（通过主配置记录的外键引用）&#10;&#9;var existingConfigID *uint&#10;&#9;err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, alertConfigID).Select(&quot;template_config_id&quot;).First(&amp;existingConfigID).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to get existing template config ID: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;if existingConfigID == nil || *existingConfigID == 0 {&#10;&#9;&#9;// 不存在则创建新的&#10;&#9;&#9;config.ID = 0&#10;&#9;&#9;if err := tx.Create(config).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create template configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;// 更新主配置记录中的引用ID&#10;&#9;&#9;if err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, alertConfigID).Update(&quot;template_config_id&quot;, config.ID).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update template config reference: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;} else {&#10;&#9;&#9;// 存在则更新&#10;&#9;&#9;updateData := map[string]interface{}{&#10;&#9;&#9;&#9;&quot;template_id&quot;: config.TemplateId,&#10;&#9;&#9;&#9;&quot;lang&quot;:        config.Lang,&#10;&#9;&#9;&#9;&quot;type&quot;:        config.Type,&#10;&#9;&#9;&#9;&quot;version&quot;:     config.Version,&#10;&#9;&#9;&#9;&quot;aonotations&quot;: config.Aonotations,&#10;&#9;&#9;&#9;&quot;tokens&quot;:      config.Tokens,&#10;&#9;&#9;}&#10;&#9;&#9;if err := tx.Model(&amp;models.TemplateConfiguration{}).Where(&quot;id = ?&quot;, *existingConfigID).Updates(updateData).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update template configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;config.ID = *existingConfigID&#10;&#9;}&#10;&#10;&#9;return nil&#10;}&#10;&#10;// upsertSinkAlerthubConfig 更新或插入 Sink Alerthub 配置&#10;func (s *alertStore) upsertSinkAlerthubConfig(tx *gorm.DB, alertConfigID uint, config *models.SinkAlerthubConfiguration) error {&#10;&#9;// 查找现有的配置（通过主配置记录的外键引用）&#10;&#9;var existingConfigID *uint&#10;&#9;err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, alertConfigID).Select(&quot;sink_alerthub_config_id&quot;).First(&amp;existingConfigID).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to get existing sink alerthub config ID: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;if existingConfigID == nil || *existingConfigID == 0 {&#10;&#9;&#9;// 不存在则创建新的&#10;&#9;&#9;config.ID = 0&#10;&#9;&#9;if err := tx.Create(config).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create sink alerthub configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;// 更新主配置记录中的引用ID&#10;&#9;&#9;if err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, alertConfigID).Update(&quot;sink_alerthub_config_id&quot;, config.ID).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update sink alerthub config reference: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;} else {&#10;&#9;&#9;// 存在则更新&#10;&#9;&#9;updateData := map[string]interface{}{&#10;&#9;&#9;&#9;&quot;enabled&quot;: config.Enabled,&#10;&#9;&#9;}&#10;&#9;&#9;if err := tx.Model(&amp;models.SinkAlerthubConfiguration{}).Where(&quot;id = ?&quot;, *existingConfigID).Updates(updateData).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update sink alerthub configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;config.ID = *existingConfigID&#10;&#9;}&#10;&#10;&#9;return nil&#10;}&#10;&#10;// upsertSinkCmsConfig 更新或插入 Sink CMS 配置&#10;func (s *alertStore) upsertSinkCmsConfig(tx *gorm.DB, alertConfigID uint, config *models.SinkCmsConfiguration) error {&#10;&#9;// 查找现有的配置（通过主配置记录的外键引用）&#10;&#9;var existingConfigID *uint&#10;&#9;err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, alertConfigID).Select(&quot;sink_cms_config_id&quot;).First(&amp;existingConfigID).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to get existing sink cms config ID: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;if existingConfigID == nil || *existingConfigID == 0 {&#10;&#9;&#9;// 不存在则创建新的&#10;&#9;&#9;config.ID = 0&#10;&#9;&#9;if err := tx.Create(config).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create sink cms configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;// 更新主配置记录中的引用ID&#10;&#9;&#9;if err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, alertConfigID).Update(&quot;sink_cms_config_id&quot;, config.ID).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update sink cms config reference: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;} else {&#10;&#9;&#9;// 存在则更新&#10;&#9;&#9;updateData := map[string]interface{}{&#10;&#9;&#9;&#9;&quot;enabled&quot;: config.Enabled,&#10;&#9;&#9;}&#10;&#9;&#9;if err := tx.Model(&amp;models.SinkCmsConfiguration{}).Where(&quot;id = ?&quot;, *existingConfigID).Updates(updateData).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update sink cms configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;config.ID = *existingConfigID&#10;&#9;}&#10;&#10;&#9;return nil&#10;}&#10;&#10;// upsertSinkEventStoreConfig 更新或插入 Sink Event Store 配置&#10;func (s *alertStore) upsertSinkEventStoreConfig(tx *gorm.DB, alertConfigID uint, config *models.SinkEventStoreConfiguration) error {&#10;&#9;// 查找现有的配置（通过主配置记录的外键引用）&#10;&#9;var existingConfigID *uint&#10;&#9;err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, alertConfigID).Select(&quot;sink_event_store_config_id&quot;).First(&amp;existingConfigID).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to get existing sink event store config ID: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;if existingConfigID == nil || *existingConfigID == 0 {&#10;&#9;&#9;// 不存在则创建新的&#10;&#9;&#9;config.ID = 0&#10;&#9;&#9;if err := tx.Create(config).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to create sink event store configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;// 更新主配置记录中的引用ID&#10;&#9;&#9;if err := tx.Model(&amp;models.AlertConfiguration{}).Where(&quot;id = ?&quot;, alertConfigID).Update(&quot;sink_event_store_config_id&quot;, config.ID).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update sink event store config reference: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;} else {&#10;&#9;&#9;// 存在则更新&#10;&#9;&#9;updateData := map[string]interface{}{&#10;&#9;&#9;&#9;&quot;enabled&quot;:     config.Enabled,&#10;&#9;&#9;&#9;&quot;endpoint&quot;:    config.Endpoint,&#10;&#9;&#9;&#9;&quot;event_store&quot;: config.EventStore,&#10;&#9;&#9;&#9;&quot;project&quot;:     config.Project,&#10;&#9;&#9;&#9;&quot;role_arn&quot;:    config.RoleArn,&#10;&#9;&#9;}&#10;&#9;&#9;if err := tx.Model(&amp;models.SinkEventStoreConfiguration{}).Where(&quot;id = ?&quot;, *existingConfigID).Updates(updateData).Error; err != nil {&#10;&#9;&#9;&#9;return fmt.Errorf(&quot;failed to update sink event store configuration: %w&quot;, err)&#10;&#9;&#9;}&#10;&#9;&#9;config.ID = *existingConfigID&#10;&#9;}&#10;&#10;&#9;return nil&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>